import * as tslib_1 from "tslib";
import { Injectable, Inject } from '@angular/core';
import { Observable, of, throwError, asyncScheduler } from 'rxjs';
import { observeOn } from 'rxjs/operators';
import { SerializationError } from './exceptions';
import { LOCAL_STORAGE_PREFIX, LS_PREFIX } from '../tokens';
import * as i0 from "@angular/core";
import * as i1 from "../tokens";
var LocalStorageDatabase = /** @class */ (function () {
    /**
     * Constructor params are provided by Angular (but can also be passed manually in tests)
     * @param prefix Prefix option to avoid collision for multiple apps on the same subdomain or for interoperability
     * @param oldPrefix Prefix option prior to v8 to avoid collision for multiple apps on the same subdomain or for interoperability
     */
    function LocalStorageDatabase(prefix, 
    // tslint:disable-next-line: deprecation
    oldPrefix) {
        if (prefix === void 0) { prefix = ''; }
        if (oldPrefix === void 0) { oldPrefix = ''; }
        /* Priority for the new prefix option, otherwise old prefix with separator, or no prefix */
        this.prefix = prefix || (oldPrefix ? oldPrefix + "_" : '');
    }
    Object.defineProperty(LocalStorageDatabase.prototype, "size", {
        /**
         * Number of items in `localStorage`
         */
        get: function () {
            /* Wrap in a RxJS `Observable` to be consistent with other storages */
            return of(localStorage.length);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Gets an item value in `localStorage`
     * @param key The item's key
     * @returns The item's value if the key exists, `undefined` otherwise, wrapped in a RxJS `Observable`
     */
    LocalStorageDatabase.prototype.get = function (key) {
        /* Get raw data */
        var unparsedData = localStorage.getItem(this.prefixKey(key));
        var parsedData;
        /* No need to parse if data is `null` or `undefined` */
        if ((unparsedData !== undefined) && (unparsedData !== null)) {
            /* Try to parse */
            try {
                parsedData = JSON.parse(unparsedData);
            }
            catch (error) {
                return throwError(error);
            }
        }
        /* Wrap in a RxJS `Observable` to be consistent with other storages */
        return of(parsedData);
    };
    /**
     * Store an item in `localStorage`
     * @param key The item's key
     * @param data The item's value
     * @returns A RxJS `Observable` to wait the end of the operation
     */
    LocalStorageDatabase.prototype.set = function (key, data) {
        var serializedData = null;
        /* Check if data can be serialized */
        var dataPrototype = Object.getPrototypeOf(data);
        if ((typeof data === 'object') && (data !== null) && !Array.isArray(data) &&
            !((dataPrototype === Object.prototype) || (dataPrototype === null))) {
            return throwError(new SerializationError());
        }
        /* Try to stringify (can fail on circular references) */
        try {
            serializedData = JSON.stringify(data);
        }
        catch (error) {
            return throwError(error);
        }
        /* Can fail if storage quota is exceeded */
        try {
            localStorage.setItem(this.prefixKey(key), serializedData);
        }
        catch (error) {
            return throwError(error);
        }
        /* Wrap in a RxJS `Observable` to be consistent with other storages */
        return of(undefined);
    };
    /**
     * Deletes an item in `localStorage`
     * @param key The item's key
     * @returns A RxJS `Observable` to wait the end of the operation
     */
    LocalStorageDatabase.prototype.delete = function (key) {
        localStorage.removeItem(this.prefixKey(key));
        /* Wrap in a RxJS `Observable` to be consistent with other storages */
        return of(undefined);
    };
    /**
     * Deletes all items in `localStorage`
     * @returns A RxJS `Observable` to wait the end of the operation
     */
    LocalStorageDatabase.prototype.clear = function () {
        localStorage.clear();
        /* Wrap in a RxJS `Observable` to be consistent with other storages */
        return of(undefined);
    };
    /**
     * Get all keys in `localStorage`
     * Note the order of the keys may be inconsistent in Firefox
     * @returns A RxJS `Observable` iterating on keys
     */
    LocalStorageDatabase.prototype.keys = function () {
        var _this = this;
        /* Create an `Observable` from keys */
        return new Observable(function (subscriber) {
            /* Iteretate over all the indexes */
            for (var index = 0; index < localStorage.length; index += 1) {
                /* Cast as we are sure in this case the key is not `null` */
                subscriber.next(_this.getUnprefixedKey(index));
            }
            subscriber.complete();
        }).pipe(
        /* Required to work like other databases which are asynchronous */
        observeOn(asyncScheduler));
    };
    /**
     * Check if a key exists in `localStorage`
     * @param key The item's key
     * @returns A RxJS `Observable` telling if the key exists or not
     */
    LocalStorageDatabase.prototype.has = function (key) {
        /* Itérate over all indexes in storage */
        for (var index = 0; index < localStorage.length; index += 1) {
            if (key === this.getUnprefixedKey(index)) {
                /* Wrap in a RxJS `Observable` to be consistent with other storages */
                return of(true);
            }
        }
        /* Wrap in a RxJS `Observable` to be consistent with other storages */
        return of(false);
    };
    /**
     * Get an unprefixed key
     * @param index Index of the key
     * @returns The unprefixed key name if exists, `null` otherwise
     */
    LocalStorageDatabase.prototype.getUnprefixedKey = function (index) {
        /* Get the key in storage: may have a prefix */
        var prefixedKey = localStorage.key(index);
        if (prefixedKey !== null) {
            /* If no prefix, the key is already good, otherwrite strip the prefix */
            return !this.prefix ? prefixedKey : prefixedKey.substr(this.prefix.length);
        }
        return null;
    };
    /**
     * Add the prefix to a key
     * @param key The key name
     * @returns The prefixed key name
     */
    LocalStorageDatabase.prototype.prefixKey = function (key) {
        return "" + this.prefix + key;
    };
    LocalStorageDatabase.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function LocalStorageDatabase_Factory() { return new LocalStorageDatabase(i0.ɵɵinject(i1.LS_PREFIX), i0.ɵɵinject(i1.LOCAL_STORAGE_PREFIX)); }, token: LocalStorageDatabase, providedIn: "root" });
    LocalStorageDatabase = tslib_1.__decorate([
        Injectable({
            providedIn: 'root'
        }),
        tslib_1.__param(0, Inject(LS_PREFIX)),
        tslib_1.__param(1, Inject(LOCAL_STORAGE_PREFIX)),
        tslib_1.__metadata("design:paramtypes", [Object, Object])
    ], LocalStorageDatabase);
    return LocalStorageDatabase;
}());
export { LocalStorageDatabase };
//# sourceMappingURL=data:application/json;base64,