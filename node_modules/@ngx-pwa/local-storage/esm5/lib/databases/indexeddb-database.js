import * as tslib_1 from "tslib";
import { Injectable, Inject } from '@angular/core';
import { ReplaySubject, fromEvent, of, throwError, race } from 'rxjs';
import { map, mergeMap, first, takeWhile, tap } from 'rxjs/operators';
import { IDBBrokenError } from './exceptions';
import { IDB_DB_NAME, IDB_STORE_NAME, DEFAULT_IDB_STORE_NAME, IDB_DB_VERSION, LOCAL_STORAGE_PREFIX, DEFAULT_IDB_DB_NAME, DEFAULT_IDB_DB_VERSION, IDB_NO_WRAP, DEFAULT_IDB_NO_WRAP } from '../tokens';
import * as i0 from "@angular/core";
import * as i1 from "../tokens";
var IndexedDBDatabase = /** @class */ (function () {
    /**
     * Constructor params are provided by Angular (but can also be passed manually in tests)
     * @param dbName `indexedDB` database name
     * @param storeName `indexedDB` store name
     * @param dbVersion `indexedDB` database version
     * @param noWrap `indexedDB` database version
     * @param oldPrefix Pre-v8 backward compatible prefix
     */
    function IndexedDBDatabase(dbName, storeName, dbVersion, noWrap, 
    // tslint:disable-next-line: deprecation
    oldPrefix) {
        if (dbName === void 0) { dbName = DEFAULT_IDB_DB_NAME; }
        if (storeName === void 0) { storeName = DEFAULT_IDB_STORE_NAME; }
        if (dbVersion === void 0) { dbVersion = DEFAULT_IDB_DB_VERSION; }
        if (noWrap === void 0) { noWrap = DEFAULT_IDB_NO_WRAP; }
        if (oldPrefix === void 0) { oldPrefix = ''; }
        /**
         * `indexedDB` database connection, wrapped in a RxJS `ReplaySubject` to be able to access the connection
         * even after the connection success event happened
         */
        this.database = new ReplaySubject(1);
        /**
         * Index used when wrapping value. *For backward compatibility only.*
         */
        this.wrapIndex = 'value';
        /* Initialize `indexedDB` database name, with prefix if provided by the user */
        this.dbName = oldPrefix ? oldPrefix + "_" + dbName : dbName;
        this.storeName = storeName;
        this.dbVersion = dbVersion;
        this.noWrap = noWrap;
        /* Connect to `indexedDB`, with prefix if provided by the user */
        this.connect();
    }
    Object.defineProperty(IndexedDBDatabase.prototype, "backingStore", {
        /**
         * Information about `indexedDB` connection. *Only useful for interoperability.*
         * @returns `indexedDB` database name, store name and database version
         */
        get: function () {
            return {
                database: this.dbName,
                store: this.storeName,
                version: this.dbVersion,
            };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IndexedDBDatabase.prototype, "size", {
        /**
         * Number of items in our `indexedDB` database and object store
         */
        get: function () {
            var _this = this;
            /* Open a transaction in read-only mode */
            return this.transaction('readonly').pipe(mergeMap(function (store) {
                /* Request to know the number of items */
                var request = store.count();
                /* Manage success and error events, and get the result */
                return _this.requestEventsAndMapTo(request, function () { return request.result; });
            }), 
            /* The observable will complete after the first value */
            first());
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Gets an item value in our `indexedDB` store
     * @param key The item's key
     * @returns The item's value if the key exists, `undefined` otherwise, wrapped in an RxJS `Observable`
     */
    IndexedDBDatabase.prototype.get = function (key) {
        var _this = this;
        /* Open a transaction in read-only mode */
        return this.transaction('readonly').pipe(mergeMap(function (store) {
            /* Request the value with the key provided by the user */
            var request = store.get(key);
            /* Manage success and error events, and get the result */
            return _this.requestEventsAndMapTo(request, function () {
                if ((request.result !== undefined) && (request.result !== null)) {
                    /* Prior to v8, the value was wrapped in an `{ value: ...}` object */
                    if (!_this.noWrap && (typeof request.result === 'object') && (_this.wrapIndex in request.result) &&
                        (request.result[_this.wrapIndex] !== undefined) && (request.result[_this.wrapIndex] !== null)) {
                        return request.result[_this.wrapIndex];
                    }
                    else {
                        /* Cast to the wanted type */
                        return request.result;
                    }
                }
                /* Return `undefined` if the value is empty */
                return undefined;
            });
        }), 
        /* The observable will complete after the first value */
        first());
    };
    /**
     * Sets an item in our `indexedDB` store
     * @param key The item's key
     * @param data The item's value
     * @returns An RxJS `Observable` to wait the end of the operation
     */
    IndexedDBDatabase.prototype.set = function (key, data) {
        var _this = this;
        /* Storing `undefined` in `indexedDb` can cause issues in some browsers so removing item instead */
        if (data === undefined) {
            return this.delete(key);
        }
        /* Open a transaction in write mode */
        return this.transaction('readwrite').pipe(mergeMap(function (store) {
            /* Check if the key already exists or not
             * `getKey()` is better but only available in `indexedDB` v2 (Chrome >= 58, missing in IE/Edge).
             * In older browsers, the value is checked instead, but it could lead to an exception
             * if `undefined` was stored outside of this lib (e.g. directly with the native `indexedDB` API).
             */
            var requestGet = _this.getKeyRequest(store, key);
            /* Manage success and error events, and get the request result */
            return _this.requestEventsAndMapTo(requestGet, function () { return requestGet.result; }).pipe(mergeMap(function (existingEntry) {
                /* It is very important the second request is done from the same transaction/store as the previous one,
                 * otherwise it could lead to concurrency failures
                 * Avoid https://github.com/cyrilletuzi/angular-async-local-storage/issues/47 */
                var _a;
                /* Prior to v8, data was wrapped in a `{ value: ... }` object */
                var dataToStore = _this.noWrap ? data : (_a = {}, _a[_this.wrapIndex] = data, _a);
                /* Add if the item is not existing yet, or update otherwise */
                var requestSet = (existingEntry === undefined) ?
                    store.add(dataToStore, key) :
                    store.put(dataToStore, key);
                /* Manage success and error events, and map to `true` */
                return _this.requestEventsAndMapTo(requestSet, function () { return undefined; });
            }));
        }), 
        /* The observable will complete after the first value */
        first());
    };
    /**
     * Deletes an item in our `indexedDB` store
     * @param key The item's key
     * @returns An RxJS `Observable` to wait the end of the operation
     */
    IndexedDBDatabase.prototype.delete = function (key) {
        var _this = this;
        /* Open a transaction in write mode */
        return this.transaction('readwrite').pipe(mergeMap(function (store) {
            /* Deletethe item in store */
            var request = store.delete(key);
            /* Manage success and error events, and map to `true` */
            return _this.requestEventsAndMapTo(request, function () { return undefined; });
        }), 
        /* The observable will complete after the first value */
        first());
    };
    /**
     * Deletes all items from our `indexedDB` objet store
     * @returns An RxJS `Observable` to wait the end of the operation
     */
    IndexedDBDatabase.prototype.clear = function () {
        var _this = this;
        /* Open a transaction in write mode */
        return this.transaction('readwrite').pipe(mergeMap(function (store) {
            /* Delete all items in object store */
            var request = store.clear();
            /* Manage success and error events, and map to `true` */
            return _this.requestEventsAndMapTo(request, function () { return undefined; });
        }), 
        /* The observable will complete */
        first());
    };
    /**
     * Get all the keys in our `indexedDB` store
     * @returns An RxJS `Observable` iterating on each key
     */
    IndexedDBDatabase.prototype.keys = function () {
        var _this = this;
        /* Open a transaction in read-only mode */
        return this.transaction('readonly').pipe(
        /* `first()` is used as the final operator in other methods to complete the `Observable`
         * (as it all starts from a `ReplaySubject` which never ends),
         * but as this method is iterating over multiple values, `first()` **must** be used here */
        first(), mergeMap(function (store) {
            /* Open a cursor on the store
             * `.openKeyCursor()` is better for performance, but only available in indexedDB v2 (missing in IE/Edge)
             * Avoid issues like https://github.com/cyrilletuzi/angular-async-local-storage/issues/69 */
            var request = ('openKeyCursor' in store) ? store.openKeyCursor() : store.openCursor();
            /* Listen to success event */
            var success$ = _this.successEvent(request).pipe(
            /* Stop the `Observable` when the cursor is `null` */
            takeWhile(function () { return (request.result !== null); }), 
            /* This lib only allows string keys, but user could have added other types of keys from outside
             * It's OK to cast as the cursor as been tested in the previous operator */
            map(function () { return request.result.key.toString(); }), 
            /* Iterate on the cursor */
            tap(function () { request.result.continue(); }));
            /* Listen to error event and if so, throw an error */
            var error$ = _this.errorEvent(request);
            /* Choose the first event to occur */
            return race([success$, error$]);
        }));
    };
    /**
     * Check if a key exists in our `indexedDB` store
     * @returns An RxJS `Observable` telling if the key exists or not
     */
    IndexedDBDatabase.prototype.has = function (key) {
        var _this = this;
        /* Open a transaction in read-only mode */
        return this.transaction('readonly').pipe(mergeMap(function (store) {
            /* Check if the key exists in the store */
            var request = _this.getKeyRequest(store, key);
            /* Manage success and error events, and map to a boolean based on the existence of the key */
            return _this.requestEventsAndMapTo(request, function () { return (request.result !== undefined) ? true : false; });
        }), 
        /* The observable will complete */
        first());
    };
    /**
     * Connects to `indexedDB` and creates the object store on first time
     */
    IndexedDBDatabase.prototype.connect = function () {
        var _this = this;
        var request;
        /* Connect to `indexedDB`
         * Will fail in Safari cross-origin iframes
         * @see {@link https://github.com/cyrilletuzi/angular-async-local-storage/issues/42} */
        try {
            /* Do NOT explicit `window` here, as `indexedDB` could be used from a web worker too */
            request = indexedDB.open(this.dbName, this.dbVersion);
        }
        catch (_a) {
            this.database.error(new IDBBrokenError());
            return;
        }
        /* Create store on first connection */
        this.createStore(request);
        /* Listen to success and error events and choose the first to occur */
        race([this.successEvent(request), this.errorEvent(request)])
            /* The observable will complete */
            .pipe(first())
            .subscribe({
            next: function () {
                /* Register the database connection in the `ReplaySubject` for further access */
                _this.database.next(request.result);
            },
            error: function () {
                /* Firefox private mode issue: fallback storage if IndexedDb connection is failing
                * @see {@link https://bugzilla.mozilla.org/show_bug.cgi?id=781982}
                * @see {@link https://github.com/cyrilletuzi/angular-async-local-storage/issues/26} */
                _this.database.error(new IDBBrokenError());
            },
        });
    };
    /**
     * Create store on first use of `indexedDB`
     * @param request `indexedDB` database opening request
     */
    IndexedDBDatabase.prototype.createStore = function (request) {
        var _this = this;
        /* Listen to the event fired on first connection */
        fromEvent(request, 'upgradeneeded')
            /* The observable will complete */
            .pipe(first())
            .subscribe({
            next: function () {
                /* Check if the store already exists, to avoid error */
                if (!request.result.objectStoreNames.contains(_this.storeName)) {
                    /* Create the object store */
                    request.result.createObjectStore(_this.storeName);
                }
            }
        });
    };
    /**
     * Open an `indexedDB` transaction and get our store
     * @param mode `readonly` or `readwrite`
     * @returns An `indexedDB` store, wrapped in an RxJS `Observable`
     */
    IndexedDBDatabase.prototype.transaction = function (mode) {
        var _this = this;
        /* From the `indexedDB` connection, open a transaction and get the store */
        return this.database
            .pipe(mergeMap(function (database) {
            var store;
            try {
                store = database.transaction([_this.storeName], mode).objectStore(_this.storeName);
            }
            catch (error) {
                /* The store could have been deleted from outside */
                return throwError(error);
            }
            return of(store);
        }));
    };
    /**
     * Listen to an `indexedDB` success error event
     * @param request Request to listen
     * @returns An RxJS `Observable` listening to the success event
     */
    IndexedDBDatabase.prototype.successEvent = function (request) {
        return fromEvent(request, 'success');
    };
    /**
     * Listen to an `indexedDB` request error event
     * @param request Request to listen
     * @returns An RxJS `Observable` listening to the error event and if so, throwing an error
     */
    IndexedDBDatabase.prototype.errorEvent = function (request) {
        return fromEvent(request, 'error').pipe(mergeMap(function () { return throwError(request.error); }));
    };
    /**
     * Listen to an `indexedDB` request success and error event, and map to the wanted value
     * @param request Request to listen
     * @param mapCallback Callback returning the wanted value
     * @returns An RxJS `Observable` listening to request events and mapping to the wanted value
     */
    IndexedDBDatabase.prototype.requestEventsAndMapTo = function (request, mapCallback) {
        /* Listen to the success event and map to the wanted value
         * `mapTo()` must not be used here as it would eval `request.result` too soon */
        var success$ = this.successEvent(request).pipe(map(mapCallback));
        /* Listen to the error event */
        var error$ = this.errorEvent(request);
        /* Choose the first event to occur */
        return race([success$, error$]);
    };
    /**
     * Check if the key exists in the store
     * @param store Objet store on which to perform the request
     * @param key Key to check
     * @returns An `indexedDB` request
     */
    IndexedDBDatabase.prototype.getKeyRequest = function (store, key) {
        /* `getKey()` is better but only available in `indexedDB` v2 (Chrome >= 58, missing in IE/Edge).
         * In older browsers, the value is checked instead, but it could lead to an exception
         * if `undefined` was stored outside of this lib (e.g. directly with the native `indexedDB` API).
         * Fixes https://github.com/cyrilletuzi/angular-async-local-storage/issues/69
         */
        return ('getKey' in store) ? store.getKey(key) : store.get(key);
    };
    IndexedDBDatabase.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function IndexedDBDatabase_Factory() { return new IndexedDBDatabase(i0.ɵɵinject(i1.IDB_DB_NAME), i0.ɵɵinject(i1.IDB_STORE_NAME), i0.ɵɵinject(i1.IDB_DB_VERSION), i0.ɵɵinject(i1.IDB_NO_WRAP), i0.ɵɵinject(i1.LOCAL_STORAGE_PREFIX)); }, token: IndexedDBDatabase, providedIn: "root" });
    IndexedDBDatabase = tslib_1.__decorate([
        Injectable({
            providedIn: 'root'
        }),
        tslib_1.__param(0, Inject(IDB_DB_NAME)),
        tslib_1.__param(1, Inject(IDB_STORE_NAME)),
        tslib_1.__param(2, Inject(IDB_DB_VERSION)),
        tslib_1.__param(3, Inject(IDB_NO_WRAP)),
        tslib_1.__param(4, Inject(LOCAL_STORAGE_PREFIX)),
        tslib_1.__metadata("design:paramtypes", [Object, Object, Object, Object, Object])
    ], IndexedDBDatabase);
    return IndexedDBDatabase;
}());
export { IndexedDBDatabase };
//# sourceMappingURL=data:application/json;base64,