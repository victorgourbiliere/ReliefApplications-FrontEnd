import * as tslib_1 from "tslib";
import { Injectable, Inject } from '@angular/core';
import { throwError, of } from 'rxjs';
import { mergeMap, catchError } from 'rxjs/operators';
import { ValidationError } from './exceptions';
import { JSONValidator } from '../validation';
import { LocalDatabase, IDB_BROKEN_ERROR, LocalStorageDatabase, IndexedDBDatabase, MemoryDatabase } from '../databases';
import { LS_PREFIX, LOCAL_STORAGE_PREFIX } from '../tokens';
import * as i0 from "@angular/core";
import * as i1 from "../databases/local-database";
import * as i2 from "../validation/json-validator";
import * as i3 from "../tokens";
var StorageMap = /** @class */ (function () {
    /**
     * Constructor params are provided by Angular (but can also be passed manually in tests)
     * @param database Storage to use
     * @param jsonValidator Validator service
     * @param LSPrefix Prefix for `localStorage` keys to avoid collision for multiple apps on the same subdomain or for interoperability
     * @param oldPrefix Prefix option prior to v8 to avoid collision for multiple apps on the same subdomain or for interoperability
     */
    function StorageMap(database, jsonValidator, LSPrefix, 
    // tslint:disable-next-line: deprecation
    oldPrefix) {
        if (jsonValidator === void 0) { jsonValidator = new JSONValidator(); }
        if (LSPrefix === void 0) { LSPrefix = ''; }
        if (oldPrefix === void 0) { oldPrefix = ''; }
        this.database = database;
        this.jsonValidator = jsonValidator;
        this.LSPrefix = LSPrefix;
        this.oldPrefix = oldPrefix;
    }
    Object.defineProperty(StorageMap.prototype, "size", {
        /**
         * **Number of items** in storage, wrapped in an `Observable`.
         *
         * @example
         * this.storageMap.size.subscribe((size) => {
         *   console.log(size);
         * });
         */
        get: function () {
            return this.database.size;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StorageMap.prototype, "backingEngine", {
        /**
         * Tells you which storage engine is used. *Only useful for interoperability.*
         * Note that due to some browsers issues in some special contexts
         * (Firefox private mode and Safari cross-origin iframes),
         * **this information may be wrong at initialization,**
         * as the storage could fallback from `indexedDB` to `localStorage`
         * only after a first read or write operation.
         * @returns Storage engine used
         *
         * @see {@link https://github.com/cyrilletuzi/angular-async-local-storage/blob/master/docs/INTEROPERABILITY.md}
         *
         * @example
         * if (this.storageMap.backingEngine === 'indexedDB') {}
         */
        get: function () {
            if (this.database instanceof IndexedDBDatabase) {
                return 'indexedDB';
            }
            else if (this.database instanceof LocalStorageDatabase) {
                return 'localStorage';
            }
            else if (this.database instanceof MemoryDatabase) {
                return 'memory';
            }
            else {
                return 'unknown';
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StorageMap.prototype, "backingStore", {
        /**
         * Info about `indexedDB` database. *Only useful for interoperability.*
         * @returns `indexedDB` database name, store name and database version.
         * **Values will be empty if the storage is not `indexedDB`,**
         * **so it should be used after an engine check**.
         *
         * @see {@link https://github.com/cyrilletuzi/angular-async-local-storage/blob/master/docs/INTEROPERABILITY.md}
         *
         * @example
         * if (this.storageMap.backingEngine === 'indexedDB') {
         *   const { database, store, version } = this.storageMap.backingStore;
         * }
         */
        get: function () {
            return (this.database instanceof IndexedDBDatabase) ?
                this.database.backingStore :
                { database: '', store: '', version: 0 };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StorageMap.prototype, "fallbackBackingStore", {
        /**
         * Info about `localStorage` fallback storage. *Only useful for interoperability.*
         * @returns `localStorage` prefix.
         * **Values will be empty if the storage is not `localStorage`,**
         * **so it should be used after an engine check**.
         *
         * @see {@link https://github.com/cyrilletuzi/angular-async-local-storage/blob/master/docs/INTEROPERABILITY.md}
         *
         * @example
         * if (this.storageMap.backingEngine === 'localStorage') {
         *   const { prefix } = this.storageMap.fallbackBackingStore;
         * }
         */
        get: function () {
            return (this.database instanceof LocalStorageDatabase) ?
                { prefix: this.database.prefix } :
                { prefix: '' };
        },
        enumerable: true,
        configurable: true
    });
    StorageMap.prototype.get = function (key, schema) {
        var _this = this;
        /* Get the data in storage */
        return this.database.get(key).pipe(
        /* Check if `indexedDb` is broken */
        this.catchIDBBroken(function () { return _this.database.get(key); }), mergeMap(function (data) {
            /* No need to validate if the data is empty */
            if ((data === undefined) || (data === null)) {
                return of(undefined);
            }
            else if (schema) {
                /* Validate data against a JSON schema if provided */
                if (!_this.jsonValidator.validate(data, schema)) {
                    return throwError(new ValidationError());
                }
                /* Data have been checked, so it's OK to cast */
                return of(data);
            }
            /* Cast to unknown as the data wasn't checked */
            return of(data);
        }));
    };
    /**
     * Set an item in storage.
     * Note that setting `null` or `undefined` will remove the item to avoid some browsers issues.
     * @param key The item's key
     * @param data The item's value
     * @param schema Optional JSON schema to validate the data
     * @returns A RxJS `Observable` to wait the end of the operation
     *
     * @example
     * this.storageMap.set('key', 'value').subscribe(() => {});
     */
    StorageMap.prototype.set = function (key, data, schema) {
        var _this = this;
        /* Storing `undefined` or `null` is useless and can cause issues in `indexedDb` in some browsers,
         * so removing item instead for all storages to have a consistent API */
        if ((data === undefined) || (data === null)) {
            return this.delete(key);
        }
        /* Validate data against a JSON schema if provided */
        if (schema && !this.jsonValidator.validate(data, schema)) {
            return throwError(new ValidationError());
        }
        return this.database.set(key, data)
            /* Catch if `indexedDb` is broken */
            .pipe(this.catchIDBBroken(function () { return _this.database.set(key, data); }));
    };
    /**
     * Delete an item in storage
     * @param key The item's key
     * @returns A RxJS `Observable` to wait the end of the operation
     *
     * @example
     * this.storageMap.delete('key').subscribe(() => {});
     */
    StorageMap.prototype.delete = function (key) {
        var _this = this;
        return this.database.delete(key)
            /* Catch if `indexedDb` is broken */
            .pipe(this.catchIDBBroken(function () { return _this.database.delete(key); }));
    };
    /**
     * Delete all items in storage
     * @returns A RxJS `Observable` to wait the end of the operation
     *
     * @example
     * this.storageMap.clear().subscribe(() => {});
     */
    StorageMap.prototype.clear = function () {
        var _this = this;
        return this.database.clear()
            /* Catch if `indexedDb` is broken */
            .pipe(this.catchIDBBroken(function () { return _this.database.clear(); }));
    };
    /**
     * Get all keys stored in storage. Note **this is an *iterating* `Observable`**:
     * * if there is no key, the `next` callback will not be invoked,
     * * if you need to wait the whole operation to end, be sure to act in the `complete` callback,
     * as this `Observable` can emit several values and so will invoke the `next` callback several times.
     * @returns A list of the keys wrapped in a RxJS `Observable`
     *
     * @example
     * this.storageMap.keys().subscribe({
     *   next: (key) => { console.log(key); },
     *   complete: () => { console.log('Done'); },
     * });
     */
    StorageMap.prototype.keys = function () {
        var _this = this;
        return this.database.keys()
            /* Catch if `indexedDb` is broken */
            .pipe(this.catchIDBBroken(function () { return _this.database.keys(); }));
    };
    /**
     * Tells if a key exists in storage
     * @returns A RxJS `Observable` telling if the key exists
     *
     * @example
     * this.storageMap.has('key').subscribe((hasKey) => {
     *   if (hasKey) {}
     * });
     */
    StorageMap.prototype.has = function (key) {
        var _this = this;
        return this.database.has(key)
            /* Catch if `indexedDb` is broken */
            .pipe(this.catchIDBBroken(function () { return _this.database.has(key); }));
    };
    /**
     * RxJS operator to catch if `indexedDB` is broken
     * @param operationCallback Callback with the operation to redo
     */
    StorageMap.prototype.catchIDBBroken = function (operationCallback) {
        var _this = this;
        return catchError(function (error) {
            /* Check if `indexedDB` is broken based on error message (the specific error class seems to be lost in the process) */
            if ((error !== undefined) && (error !== null) && (error.message === IDB_BROKEN_ERROR)) {
                /* When storage is fully disabled in browser (via the "Block all cookies" option),
                 * just trying to check `localStorage` variable causes a security exception.
                 * Prevents https://github.com/cyrilletuzi/angular-async-local-storage/issues/118
                 */
                try {
                    if ('getItem' in localStorage) {
                        /* Fallback to `localStorage` if available */
                        _this.database = new LocalStorageDatabase(_this.LSPrefix, _this.oldPrefix);
                    }
                    else {
                        /* Fallback to memory storage otherwise */
                        _this.database = new MemoryDatabase();
                    }
                }
                catch (_a) {
                    /* Fallback to memory storage otherwise */
                    _this.database = new MemoryDatabase();
                }
                /* Redo the operation */
                return operationCallback();
            }
            else {
                /* Otherwise, rethrow the error */
                return throwError(error);
            }
        });
    };
    StorageMap.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function StorageMap_Factory() { return new StorageMap(i0.ɵɵinject(i1.LocalDatabase), i0.ɵɵinject(i2.JSONValidator), i0.ɵɵinject(i3.LS_PREFIX), i0.ɵɵinject(i3.LOCAL_STORAGE_PREFIX)); }, token: StorageMap, providedIn: "root" });
    StorageMap = tslib_1.__decorate([
        Injectable({
            providedIn: 'root'
        }),
        tslib_1.__param(2, Inject(LS_PREFIX)),
        tslib_1.__param(3, Inject(LOCAL_STORAGE_PREFIX)),
        tslib_1.__metadata("design:paramtypes", [LocalDatabase,
            JSONValidator, Object, Object])
    ], StorageMap);
    return StorageMap;
}());
export { StorageMap };
//# sourceMappingURL=data:application/json;base64,