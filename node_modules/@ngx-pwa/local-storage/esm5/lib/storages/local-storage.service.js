import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { mapTo, toArray, map } from 'rxjs/operators';
import { StorageMap } from './storage-map.service';
import * as i0 from "@angular/core";
import * as i1 from "./storage-map.service";
var LocalStorage = /** @class */ (function () {
    /* Use the `StorageMap` service to avoid code duplication */
    function LocalStorage(storageMap) {
        this.storageMap = storageMap;
    }
    Object.defineProperty(LocalStorage.prototype, "size", {
        /**
         * Number of items in storage
         * @deprecated Use `.length`, or use `.size` via the new `StorageMap` service. Will be removed in v9.
         */
        get: function () {
            return this.length;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LocalStorage.prototype, "length", {
        /**
         * Number of items in storage wrapped in an `Observable`
         *
         * @example
         * this.localStorage.length.subscribe((length) => {
         *   console.log(length);
         * });
         */
        get: function () {
            return this.storageMap.size;
        },
        enumerable: true,
        configurable: true
    });
    LocalStorage.prototype.getItem = function (key, schema) {
        if (schema) {
            /* Backward compatibility with version <= 7 */
            var schemaFinal = ('schema' in schema) ? schema.schema : schema;
            return this.storageMap.get(key, schemaFinal).pipe(
            /* Transform `undefined` into `null` to align with `localStorage` API */
            map(function (value) { return (value !== undefined) ? value : null; }));
        }
        else {
            return this.storageMap.get(key).pipe(
            /* Transform `undefined` into `null` to align with `localStorage` API */
            map(function (value) { return (value !== undefined) ? value : null; }));
        }
    };
    /**
     * Set an item in storage.
     * Note that setting `null` or `undefined` will remove the item to avoid some browsers issues.
     * @param key The item's key
     * @param data The item's value
     * @param schema Optional JSON schema to validate the data
     * @returns A RxJS `Observable` to wait the end of the operation
     *
     * @example
     * this.localStorage.set('key', 'value').subscribe(() => {});
     */
    LocalStorage.prototype.setItem = function (key, data, schema) {
        return this.storageMap.set(key, data, schema).pipe(
        /* Transform `undefined` into `true` for backward compatibility with v7 */
        mapTo(true));
    };
    /**
     * Delete an item in storage
     * @param key The item's key
     * @returns A RxJS `Observable` to wait the end of the operation
     *
     * @example
     * this.localStorage.delete('key').subscribe(() => {});
     */
    LocalStorage.prototype.removeItem = function (key) {
        return this.storageMap.delete(key).pipe(
        /* Transform `undefined` into `true` for backward compatibility with v7 */
        mapTo(true));
    };
    /**
     * Delete all items in storage
     * @returns A RxJS `Observable` to wait the end of the operation
     *
     * @example
     * this.localStorage.clear().subscribe(() => {});
     */
    LocalStorage.prototype.clear = function () {
        return this.storageMap.clear().pipe(
        /* Transform `undefined` into `true` for backward compatibility with v7 */
        mapTo(true));
    };
    /**
     * Get all keys stored in storage
     * @returns A list of the keys wrapped in a RxJS `Observable`
     * @deprecated Moved to `StorageMap` service. Will be removed in v9.
     * Note that while this method was giving you all keys at once in an array,
     * the new `keys()` method in `StorageMap` service will *iterate* on each key.
     */
    LocalStorage.prototype.keys = function () {
        return this.storageMap.keys().pipe(
        /* Backward compatibility with v7: transform iterating `Observable` to a single array value */
        toArray());
    };
    /**
     * Tells if a key exists in storage
     * @returns A RxJS `Observable` telling if the key exists
     * @deprecated Moved to `StorageMap` service. Will be removed in v9.
     */
    LocalStorage.prototype.has = function (key) {
        return this.storageMap.has(key);
    };
    /**
     * Set an item in storage, and auto-subscribe
     * @param key The item's key
     * @param data The item's value
     * **WARNING: should be avoided in most cases, use this method only if these conditions are fulfilled:**
     * - you don't need to manage the error callback (errors will silently fail),
     * - you don't need to wait the operation to finish before the next one (remember, it's asynchronous).
     * @deprecated Promoted bad practices. Will be removed in v9.
     */
    LocalStorage.prototype.setItemSubscribe = function (key, data) {
        this.setItem(key, data).subscribe({
            next: function () { },
            error: function () { },
        });
    };
    /**
     * Delete an item in storage, and auto-subscribe
     * @param key The item's key
     * **WARNING: should be avoided in most cases, use this method only if these conditions are fulfilled:**
     * - you don't need to manage the error callback (errors will silently fail),
     * - you don't need to wait the operation to finish before the next one (remember, it's asynchronous).
     * @deprecated Promoted bad practices. Will be removed in v9.
     */
    LocalStorage.prototype.removeItemSubscribe = function (key) {
        this.removeItem(key).subscribe({
            next: function () { },
            error: function () { },
        });
    };
    /**
     * Delete all items in storage, and auto-subscribe
     * **WARNING: should be avoided in most cases, use this method only if these conditions are fulfilled:**
     * - you don't need to manage the error callback (errors will silently fail),
     * - you don't need to wait the operation to finish before the next one (remember, it's asynchronous).
     * @deprecated Promoted bad practices. Will be removed in v9.
     */
    LocalStorage.prototype.clearSubscribe = function () {
        this.clear().subscribe({
            next: function () { },
            error: function () { },
        });
    };
    LocalStorage.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function LocalStorage_Factory() { return new LocalStorage(i0.ɵɵinject(i1.StorageMap)); }, token: LocalStorage, providedIn: "root" });
    LocalStorage = tslib_1.__decorate([
        Injectable({
            providedIn: 'root'
        }),
        tslib_1.__metadata("design:paramtypes", [StorageMap])
    ], LocalStorage);
    return LocalStorage;
}());
export { LocalStorage };
//# sourceMappingURL=data:application/json;base64,