import { InjectionToken } from '@angular/core';
/**
 * Token to provide a prefix to avoid collision when multiple apps on the same *sub*domain.
 * @deprecated **Will be removed in v9**. Set options with `StorageModule.forRoot()` instead:
 *
 * Before v8:
 * ```ts
 * import { localStorageProviders, LOCAL_STORAGE_PREFIX } from '@ngx-pwa/local-storage';
 *
 * @NgModule({
 *   providers: [
 *     { provide: LOCAL_STORAGE_PREFIX, useValue: 'myapp' },
 *   ]
 * })
 * export class AppModule {}
 * ```
 *
 * Since v8:
 * ```ts
 * import { StorageModule } from '@ngx-pwa/local-storage';
 *
 * @NgModule({
 *   imports: [
 *     StorageModule.forRoot({
 *       LSPrefix: 'myapp_', // Note the underscore
 *       IDBDBName: 'myapp_ngStorage',
 *     }),
 *   ]
 * })
 * export class AppModule {}
 * ```
 *
 * **Be very careful while changing this in applications already deployed in production,**
 * **as an error would mean the loss of all previously stored data.**
 * **SO PLEASE TEST BEFORE PUSHING IN PRODUCTION.**
 *
 */
export var LOCAL_STORAGE_PREFIX = new InjectionToken('localStoragePrefix', {
    providedIn: 'root',
    factory: function () { return ''; }
});
/**
 * Token to provide a prefix to `localStorage` keys.
 */
export var LS_PREFIX = new InjectionToken('localStoragePrefix', {
    providedIn: 'root',
    factory: function () { return ''; }
});
/**
 * Default name used for `indexedDB` database.
 */
export var DEFAULT_IDB_DB_NAME = 'ngStorage';
/**
 * Token to provide `indexedDB` database name.
 */
export var IDB_DB_NAME = new InjectionToken('localStorageIDBDBName', {
    providedIn: 'root',
    factory: function () { return DEFAULT_IDB_DB_NAME; }
});
/**
 * Default version used for `indexedDB` database.
 */
export var DEFAULT_IDB_DB_VERSION = 1;
/**
 * Token to provide `indexedDB` database version.
 * Must be an unsigned **integer**.
 */
export var IDB_DB_VERSION = new InjectionToken('localStorageIDBDBVersion', {
    providedIn: 'root',
    factory: function () { return DEFAULT_IDB_DB_VERSION; }
});
/**
 * Default name used for `indexedDB` object store.
 */
export var DEFAULT_IDB_STORE_NAME = 'localStorage';
/**
 * Token to provide `indexedDB` store name.
 * For backward compatibility, the default can't be set now, `IndexedDBDatabase` will do it at runtime.
 */
export var IDB_STORE_NAME = new InjectionToken('localStorageIDBStoreName', {
    providedIn: 'root',
    factory: function () { return DEFAULT_IDB_STORE_NAME; }
});
/**
 * Default value for interoperability with native `indexedDB` and other storage libs,
 * by changing how values are stored in `indexedDB` database.
 * Currently defaults to `false` for backward compatiblity in existing applications
 * (**DO NOT CHANGE IT IN PRODUCTION**, as it would break with existing data),
 * but **should be `false` in all new applications, as it may become the default in a future version**.
 */
export var DEFAULT_IDB_NO_WRAP = false;
/**
 * Token to allow interoperability with native `indexedDB` and other storage libs,
 * by changing how values are stored in `indexedDB` database.
 * Currently defaults to `false` for backward compatiblity in existing applications
 * (**DO NOT CHANGE IT IN PRODUCTION**, as it would break with existing data),
 * but **should be `true` in all new applications, as it may become the default in a future version**.
 */
export var IDB_NO_WRAP = new InjectionToken('localStorageIDBWrap', {
    providedIn: 'root',
    factory: function () { return DEFAULT_IDB_NO_WRAP; }
});
/**
 * Helper function to provide options. **Must be used at initialization, ie. in `AppModule`.**
 * @param config Options.
 * @returns A list of providers for the lib options.
 * @deprecated **Will be removed in v9.** Set options via `StorageModule.forRoot()` instead:
 *
 * Before v8:
 * ```ts
 * import { localStorageProviders, LOCAL_STORAGE_PREFIX } from '@ngx-pwa/local-storage';
 *
 * @NgModule({
 *   providers: [
 *     localStorageProviders({ prefix: 'myapp' }),
 *   ]
 * })
 * export class AppModule {}
 * ```
 *
 * Since v8:
 * ```ts
 * import { StorageModule } from '@ngx-pwa/local-storage';
 *
 * @NgModule({
 *   imports: [
 *     StorageModule.forRoot({
 *       LSPrefix: 'myapp_', // Note the underscore
 *       IDBDBName: 'myapp_ngStorage',
 *     }),
 *   ]
 * })
 * export class AppModule {}
 * ```
 *
 * **Be very careful while changing this in applications already deployed in production,**
 * **as an error would mean the loss of all previously stored data.**
 * **SO PLEASE TEST BEFORE PUSHING IN PRODUCTION.**
 *
 */
// tslint:disable-next-line: deprecation
export function localStorageProviders(config) {
    return [
        // tslint:disable-next-line: deprecation
        config.prefix ? { provide: LOCAL_STORAGE_PREFIX, useValue: config.prefix } : [],
    ];
}
//# sourceMappingURL=data:application/json;base64,