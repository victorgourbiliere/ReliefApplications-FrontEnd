import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { mapTo, toArray, map } from 'rxjs/operators';
import { StorageMap } from './storage-map.service';
import * as i0 from "@angular/core";
import * as i1 from "./storage-map.service";
let LocalStorage = class LocalStorage {
    /* Use the `StorageMap` service to avoid code duplication */
    constructor(storageMap) {
        this.storageMap = storageMap;
    }
    /**
     * Number of items in storage
     * @deprecated Use `.length`, or use `.size` via the new `StorageMap` service. Will be removed in v9.
     */
    get size() {
        return this.length;
    }
    /**
     * Number of items in storage wrapped in an `Observable`
     *
     * @example
     * this.localStorage.length.subscribe((length) => {
     *   console.log(length);
     * });
     */
    get length() {
        return this.storageMap.size;
    }
    getItem(key, schema) {
        if (schema) {
            /* Backward compatibility with version <= 7 */
            const schemaFinal = ('schema' in schema) ? schema.schema : schema;
            return this.storageMap.get(key, schemaFinal).pipe(
            /* Transform `undefined` into `null` to align with `localStorage` API */
            map((value) => (value !== undefined) ? value : null));
        }
        else {
            return this.storageMap.get(key).pipe(
            /* Transform `undefined` into `null` to align with `localStorage` API */
            map((value) => (value !== undefined) ? value : null));
        }
    }
    /**
     * Set an item in storage.
     * Note that setting `null` or `undefined` will remove the item to avoid some browsers issues.
     * @param key The item's key
     * @param data The item's value
     * @param schema Optional JSON schema to validate the data
     * @returns A RxJS `Observable` to wait the end of the operation
     *
     * @example
     * this.localStorage.set('key', 'value').subscribe(() => {});
     */
    setItem(key, data, schema) {
        return this.storageMap.set(key, data, schema).pipe(
        /* Transform `undefined` into `true` for backward compatibility with v7 */
        mapTo(true));
    }
    /**
     * Delete an item in storage
     * @param key The item's key
     * @returns A RxJS `Observable` to wait the end of the operation
     *
     * @example
     * this.localStorage.delete('key').subscribe(() => {});
     */
    removeItem(key) {
        return this.storageMap.delete(key).pipe(
        /* Transform `undefined` into `true` for backward compatibility with v7 */
        mapTo(true));
    }
    /**
     * Delete all items in storage
     * @returns A RxJS `Observable` to wait the end of the operation
     *
     * @example
     * this.localStorage.clear().subscribe(() => {});
     */
    clear() {
        return this.storageMap.clear().pipe(
        /* Transform `undefined` into `true` for backward compatibility with v7 */
        mapTo(true));
    }
    /**
     * Get all keys stored in storage
     * @returns A list of the keys wrapped in a RxJS `Observable`
     * @deprecated Moved to `StorageMap` service. Will be removed in v9.
     * Note that while this method was giving you all keys at once in an array,
     * the new `keys()` method in `StorageMap` service will *iterate* on each key.
     */
    keys() {
        return this.storageMap.keys().pipe(
        /* Backward compatibility with v7: transform iterating `Observable` to a single array value */
        toArray());
    }
    /**
     * Tells if a key exists in storage
     * @returns A RxJS `Observable` telling if the key exists
     * @deprecated Moved to `StorageMap` service. Will be removed in v9.
     */
    has(key) {
        return this.storageMap.has(key);
    }
    /**
     * Set an item in storage, and auto-subscribe
     * @param key The item's key
     * @param data The item's value
     * **WARNING: should be avoided in most cases, use this method only if these conditions are fulfilled:**
     * - you don't need to manage the error callback (errors will silently fail),
     * - you don't need to wait the operation to finish before the next one (remember, it's asynchronous).
     * @deprecated Promoted bad practices. Will be removed in v9.
     */
    setItemSubscribe(key, data) {
        this.setItem(key, data).subscribe({
            next: () => { },
            error: () => { },
        });
    }
    /**
     * Delete an item in storage, and auto-subscribe
     * @param key The item's key
     * **WARNING: should be avoided in most cases, use this method only if these conditions are fulfilled:**
     * - you don't need to manage the error callback (errors will silently fail),
     * - you don't need to wait the operation to finish before the next one (remember, it's asynchronous).
     * @deprecated Promoted bad practices. Will be removed in v9.
     */
    removeItemSubscribe(key) {
        this.removeItem(key).subscribe({
            next: () => { },
            error: () => { },
        });
    }
    /**
     * Delete all items in storage, and auto-subscribe
     * **WARNING: should be avoided in most cases, use this method only if these conditions are fulfilled:**
     * - you don't need to manage the error callback (errors will silently fail),
     * - you don't need to wait the operation to finish before the next one (remember, it's asynchronous).
     * @deprecated Promoted bad practices. Will be removed in v9.
     */
    clearSubscribe() {
        this.clear().subscribe({
            next: () => { },
            error: () => { },
        });
    }
};
LocalStorage.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function LocalStorage_Factory() { return new LocalStorage(i0.ɵɵinject(i1.StorageMap)); }, token: LocalStorage, providedIn: "root" });
LocalStorage = tslib_1.__decorate([
    Injectable({
        providedIn: 'root'
    }),
    tslib_1.__metadata("design:paramtypes", [StorageMap])
], LocalStorage);
export { LocalStorage };
//# sourceMappingURL=data:application/json;base64,