{"version":3,"sources":["../../../../node_modules/tslib/tslib.es6.js","ng://@ngx-pwa/local-storage/lib/databases/exceptions.ts","ng://@ngx-pwa/local-storage/lib/tokens.ts","ng://@ngx-pwa/local-storage/lib/databases/indexeddb-database.ts","ng://@ngx-pwa/local-storage/lib/databases/localstorage-database.ts","ng://@ngx-pwa/local-storage/lib/databases/memory-database.ts","ng://@ngx-pwa/local-storage/lib/databases/local-database.ts","ng://@ngx-pwa/local-storage/lib/storages/exceptions.ts","ng://@ngx-pwa/local-storage/lib/validation/json-validator.ts","ng://@ngx-pwa/local-storage/lib/storages/storage-map.service.ts","ng://@ngx-pwa/local-storage/lib/storages/local-storage.service.ts","ng://@ngx-pwa/local-storage/lib/storage.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","__metadata","metadataKey","metadataValue","metadata","__values","o","m","Symbol","iterator","call","next","value","done","IDB_BROKEN_ERROR","IDBBrokenError","_super","_this","apply","message","tslib_1.__extends","Error","SERIALIZATION_ERROR","SerializationError","LOCAL_STORAGE_PREFIX","InjectionToken","providedIn","factory","LS_PREFIX","DEFAULT_IDB_DB_NAME","IDB_DB_NAME","DEFAULT_IDB_DB_VERSION","IDB_DB_VERSION","DEFAULT_IDB_STORE_NAME","IDB_STORE_NAME","DEFAULT_IDB_NO_WRAP","IDB_NO_WRAP","IndexedDBDatabase","dbName","storeName","dbVersion","noWrap","oldPrefix","database","ReplaySubject","wrapIndex","connect","store","version","transaction","pipe","mergeMap","request","count","requestEventsAndMapTo","result","first","get","undefined","set","data","delete","requestGet","getKeyRequest","existingEntry","dataToStore","_a","requestSet","add","put","clear","keys","openKeyCursor","openCursor","success$","successEvent","takeWhile","map","toString","tap","continue","error$","errorEvent","race","has","indexedDB","open","error","createStore","subscribe","fromEvent","objectStoreNames","contains","createObjectStore","mode","objectStore","throwError","of","mapCallback","getKey","Injectable","tslib_1.__param","Inject","LocalStorageDatabase","prefix","localStorage","parsedData","unparsedData","getItem","prefixKey","JSON","parse","serializedData","dataPrototype","getPrototypeOf","isArray","stringify","setItem","removeItem","Observable","subscriber","index","getUnprefixedKey","complete","observeOn","asyncScheduler","prefixedKey","substr","MemoryDatabase","memoryStorage","Map","size","rawData","from","localDatabaseFactory","platformId","LSPrefix","IDBDBName","IDBStoreName","IDBDBVersion","IDBNoWrap","isPlatformBrowser","LocalDatabase","useFactory","deps","PLATFORM_ID","VALIDATION_ERROR","ValidationError","JSONValidator","validate","schema","type","validateString","validateNumber","validateBoolean","validateArray","validateObject","validateConst","validateEnum","maxLength","minLength","pattern","regularExpression","RegExp","test","Number","isInteger","multipleOf","maximum","exclusiveMaximum","minimum","exclusiveMinimum","maxItems","minItems","uniqueItems","dataSet","Set","items","validateTuple","data_1","tslib_1.__values","data_1_1","schemas","properties","required","_b","_c","requiredProp","property","const","enum","includes","StorageMap","jsonValidator","backingStore","catchIDBBroken","operationCallback","catchError","LocalStorage","storageMap","schemaFinal","mapTo","toArray","setItemSubscribe","removeItemSubscribe","clearSubscribe","StorageModule","forRoot","config","ngModule","StorageModule_1","providers","provide","useValue","NgModule"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * Exception message when `indexedDB` is not working\n */\nexport const IDB_BROKEN_ERROR = 'indexedDB is not working';\n\n/**\n * Exception raised when `indexedDB` is not working\n */\nexport class IDBBrokenError extends Error {\n  message = IDB_BROKEN_ERROR;\n}\n\n/**\n * Exception message when a value can't be serialized for `localStorage`\n */\nexport const SERIALIZATION_ERROR = `The storage is currently localStorage,\nwhere data must be serialized, and the provided data can't be serialized.`;\n\n/**\n * Exception raised when a value can't be serialized for `localStorage`\n */\nexport class SerializationError extends Error {\n  message = SERIALIZATION_ERROR;\n}\n","import { InjectionToken, Provider } from '@angular/core';\n\n/**\n * Token to provide a prefix to avoid collision when multiple apps on the same *sub*domain.\n * @deprecated **Will be removed in v9**. Set options with `StorageModule.forRoot()` instead:\n *\n * Before v8:\n * ```ts\n * import { localStorageProviders, LOCAL_STORAGE_PREFIX } from '@ngx-pwa/local-storage';\n *\n * @NgModule({\n *   providers: [\n *     { provide: LOCAL_STORAGE_PREFIX, useValue: 'myapp' },\n *   ]\n * })\n * export class AppModule {}\n * ```\n *\n * Since v8:\n * ```ts\n * import { StorageModule } from '@ngx-pwa/local-storage';\n *\n * @NgModule({\n *   imports: [\n *     StorageModule.forRoot({\n *       LSPrefix: 'myapp_', // Note the underscore\n *       IDBDBName: 'myapp_ngStorage',\n *     }),\n *   ]\n * })\n * export class AppModule {}\n * ```\n *\n * **Be very careful while changing this in applications already deployed in production,**\n * **as an error would mean the loss of all previously stored data.**\n * **SO PLEASE TEST BEFORE PUSHING IN PRODUCTION.**\n *\n */\nexport const LOCAL_STORAGE_PREFIX = new InjectionToken<string>('localStoragePrefix', {\n  providedIn: 'root',\n  factory: () => ''\n});\n\n/**\n * Token to provide a prefix to `localStorage` keys.\n */\nexport const LS_PREFIX = new InjectionToken<string>('localStoragePrefix', {\n  providedIn: 'root',\n  factory: () => ''\n});\n\n/**\n * Default name used for `indexedDB` database.\n */\nexport const DEFAULT_IDB_DB_NAME = 'ngStorage';\n\n/**\n * Token to provide `indexedDB` database name.\n */\nexport const IDB_DB_NAME = new InjectionToken<string>('localStorageIDBDBName', {\n  providedIn: 'root',\n  factory: () => DEFAULT_IDB_DB_NAME\n});\n\n/**\n * Default version used for `indexedDB` database.\n */\nexport const DEFAULT_IDB_DB_VERSION = 1;\n\n/**\n * Token to provide `indexedDB` database version.\n * Must be an unsigned **integer**.\n */\nexport const IDB_DB_VERSION = new InjectionToken<number>('localStorageIDBDBVersion', {\n  providedIn: 'root',\n  factory: () => DEFAULT_IDB_DB_VERSION\n});\n\n/**\n * Default name used for `indexedDB` object store.\n */\nexport const DEFAULT_IDB_STORE_NAME = 'localStorage';\n\n/**\n * Token to provide `indexedDB` store name.\n * For backward compatibility, the default can't be set now, `IndexedDBDatabase` will do it at runtime.\n */\nexport const IDB_STORE_NAME = new InjectionToken<string>('localStorageIDBStoreName', {\n  providedIn: 'root',\n  factory: () => DEFAULT_IDB_STORE_NAME\n});\n\n/**\n * Default value for interoperability with native `indexedDB` and other storage libs,\n * by changing how values are stored in `indexedDB` database.\n * Currently defaults to `false` for backward compatiblity in existing applications\n * (**DO NOT CHANGE IT IN PRODUCTION**, as it would break with existing data),\n * but **should be `false` in all new applications, as it may become the default in a future version**.\n */\nexport const DEFAULT_IDB_NO_WRAP = false;\n\n/**\n * Token to allow interoperability with native `indexedDB` and other storage libs,\n * by changing how values are stored in `indexedDB` database.\n * Currently defaults to `false` for backward compatiblity in existing applications\n * (**DO NOT CHANGE IT IN PRODUCTION**, as it would break with existing data),\n * but **should be `true` in all new applications, as it may become the default in a future version**.\n */\nexport const IDB_NO_WRAP = new InjectionToken<boolean>('localStorageIDBWrap', {\n  providedIn: 'root',\n  factory: () => DEFAULT_IDB_NO_WRAP\n});\n\nexport interface StorageConfig {\n\n  /**\n   * Allows to add a prefix before `localStorage` keys.\n   * *Use only* for interoperability with other APIs or to avoid collision for multiple apps on the same subdomain.\n   * **WARNING: do not change this option in an app already deployed in production, as previously stored data would be lost.**\n   */\n  LSPrefix?: string;\n\n  /**\n   * Allows to change the name used for `indexedDB` database.\n   * *Use only* for interoperability with other APIs or to avoid collision for multiple apps on the same subdomain.\n   * **WARNING: do not change this option in an app already deployed in production, as previously stored data would be lost.**\n   */\n  IDBDBName?: string;\n\n  /**\n   * Allows to change the name used for `indexedDB` object store.\n   * *Use only* for interoperability with other APIs.\n   * **WARNING: do not change this option in an app already deployed in production, as previously stored data would be lost.**\n   */\n  IDBStoreName?: string;\n\n  /**\n   * Allows to change the database version used for `indexedDB` database.\n   * Must be an unsigned **integer**.\n   * **Use with caution as the creation of the store depends on the version.**\n   * *Use only* for interoperability with other APIs or to avoid collision for multiple apps on the same subdomain.\n   * **WARNING: do not change this option in an app already deployed in production, as previously stored data would be lost.**\n   */\n  IDBDBVersion?: number;\n\n  /**\n   * Allows interoperability with native `indexedDB` and other storage libs,\n   * by changing how values are stored in `indexedDB` database.\n   * Currently defaults to `false` for backward compatiblity in existing applications,\n   * **DO NOT CHANGE IT IN PRODUCTION**, as it would break with existing data.\n   * but **should be `true` in all new applications, as it may become the default in a future version**.\n   */\n  IDBNoWrap?: boolean;\n\n}\n\n/**\n * @deprecated in favor of `StorageConfig`. Will be removed in v9.\n */\nexport interface LocalStorageProvidersConfig {\n\n  /**\n   * Prefix to avoid collision when there are *multiple apps on the same subdomain*.\n   * **WARNING: do not change this option in an app already deployed in production, as previously stored data would be lost.**\n   * @deprecated Use `LSPrefix` and `IDBDBName` options instead. Will be removed in v9.\n   */\n  prefix?: string;\n\n}\n\n/**\n * Helper function to provide options. **Must be used at initialization, ie. in `AppModule`.**\n * @param config Options.\n * @returns A list of providers for the lib options.\n * @deprecated **Will be removed in v9.** Set options via `StorageModule.forRoot()` instead:\n *\n * Before v8:\n * ```ts\n * import { localStorageProviders, LOCAL_STORAGE_PREFIX } from '@ngx-pwa/local-storage';\n *\n * @NgModule({\n *   providers: [\n *     localStorageProviders({ prefix: 'myapp' }),\n *   ]\n * })\n * export class AppModule {}\n * ```\n *\n * Since v8:\n * ```ts\n * import { StorageModule } from '@ngx-pwa/local-storage';\n *\n * @NgModule({\n *   imports: [\n *     StorageModule.forRoot({\n *       LSPrefix: 'myapp_', // Note the underscore\n *       IDBDBName: 'myapp_ngStorage',\n *     }),\n *   ]\n * })\n * export class AppModule {}\n * ```\n *\n * **Be very careful while changing this in applications already deployed in production,**\n * **as an error would mean the loss of all previously stored data.**\n * **SO PLEASE TEST BEFORE PUSHING IN PRODUCTION.**\n *\n */\n// tslint:disable-next-line: deprecation\nexport function localStorageProviders(config: LocalStorageProvidersConfig): Provider[] {\n\n  return [\n    // tslint:disable-next-line: deprecation\n    config.prefix ? { provide: LOCAL_STORAGE_PREFIX, useValue: config.prefix } : [],\n  ];\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { Observable, ReplaySubject, fromEvent, of, throwError, race } from 'rxjs';\nimport { map, mergeMap, first, takeWhile, tap } from 'rxjs/operators';\n\nimport { LocalDatabase } from './local-database';\nimport { IDBBrokenError } from './exceptions';\nimport {\n  IDB_DB_NAME, IDB_STORE_NAME, DEFAULT_IDB_STORE_NAME, IDB_DB_VERSION, LOCAL_STORAGE_PREFIX,\n  DEFAULT_IDB_DB_NAME, DEFAULT_IDB_DB_VERSION, IDB_NO_WRAP, DEFAULT_IDB_NO_WRAP\n} from '../tokens';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class IndexedDBDatabase implements LocalDatabase {\n\n  /**\n   * `indexedDB` database name\n   */\n  protected readonly dbName: string;\n\n  /**\n   * `indexedDB` object store name\n   */\n  protected readonly storeName: string;\n\n  /**\n   * `indexedDB` database version. Must be an unsigned **integer**\n   */\n  protected readonly dbVersion: number;\n\n  /**\n   * `indexedDB` database connection, wrapped in a RxJS `ReplaySubject` to be able to access the connection\n   * even after the connection success event happened\n   */\n  protected readonly database = new ReplaySubject<IDBDatabase>(1);\n\n  /**\n   * Flag to not wrap `indexedDB` values for interoperability or to wrap for backward compatibility.\n   */\n  protected readonly noWrap: boolean;\n\n  /**\n   * Index used when wrapping value. *For backward compatibility only.*\n   */\n  protected readonly wrapIndex = 'value';\n\n  /**\n   * Constructor params are provided by Angular (but can also be passed manually in tests)\n   * @param dbName `indexedDB` database name\n   * @param storeName `indexedDB` store name\n   * @param dbVersion `indexedDB` database version\n   * @param noWrap `indexedDB` database version\n   * @param oldPrefix Pre-v8 backward compatible prefix\n   */\n  constructor(\n    @Inject(IDB_DB_NAME) dbName = DEFAULT_IDB_DB_NAME,\n    @Inject(IDB_STORE_NAME) storeName = DEFAULT_IDB_STORE_NAME,\n    @Inject(IDB_DB_VERSION) dbVersion = DEFAULT_IDB_DB_VERSION,\n    @Inject(IDB_NO_WRAP) noWrap = DEFAULT_IDB_NO_WRAP,\n    // tslint:disable-next-line: deprecation\n    @Inject(LOCAL_STORAGE_PREFIX) oldPrefix = '',\n  ) {\n\n    /* Initialize `indexedDB` database name, with prefix if provided by the user */\n    this.dbName = oldPrefix ? `${oldPrefix}_${dbName}` : dbName;\n\n    this.storeName = storeName;\n    this.dbVersion = dbVersion;\n    this.noWrap = noWrap;\n\n    /* Connect to `indexedDB`, with prefix if provided by the user */\n    this.connect();\n\n  }\n\n  /**\n   * Information about `indexedDB` connection. *Only useful for interoperability.*\n   * @returns `indexedDB` database name, store name and database version\n   */\n  get backingStore(): { database: string, store: string, version: number } {\n\n    return {\n      database: this.dbName,\n      store: this.storeName,\n      version: this.dbVersion,\n    };\n\n  }\n\n  /**\n   * Number of items in our `indexedDB` database and object store\n   */\n  get size(): Observable<number> {\n\n    /* Open a transaction in read-only mode */\n    return this.transaction('readonly').pipe(\n      mergeMap((store) => {\n\n        /* Request to know the number of items */\n        const request = store.count();\n\n        /* Manage success and error events, and get the result */\n        return this.requestEventsAndMapTo(request, () => request.result);\n\n      }),\n      /* The observable will complete after the first value */\n      first(),\n    );\n\n  }\n\n  /**\n   * Gets an item value in our `indexedDB` store\n   * @param key The item's key\n   * @returns The item's value if the key exists, `undefined` otherwise, wrapped in an RxJS `Observable`\n   */\n  get<T = any>(key: string): Observable<TÂ | undefined> {\n\n    /* Open a transaction in read-only mode */\n    return this.transaction('readonly').pipe(\n      mergeMap((store) => {\n\n        /* Request the value with the key provided by the user */\n        const request = store.get(key);\n\n        /* Manage success and error events, and get the result */\n        return this.requestEventsAndMapTo(request, () => {\n\n          if ((request.result !== undefined) && (request.result !== null)) {\n\n            /* Prior to v8, the value was wrapped in an `{ value: ...}` object */\n            if (!this.noWrap && (typeof request.result === 'object') && (this.wrapIndex in request.result) &&\n            (request.result[this.wrapIndex] !== undefined) && (request.result[this.wrapIndex] !== null)) {\n\n              return (request.result[this.wrapIndex] as T);\n\n            } else {\n\n              /* Cast to the wanted type */\n              return request.result as T;\n\n            }\n\n          }\n\n          /* Return `undefined` if the value is empty */\n          return undefined;\n\n        });\n\n      }),\n      /* The observable will complete after the first value */\n      first(),\n    );\n\n  }\n\n  /**\n   * Sets an item in our `indexedDB` store\n   * @param key The item's key\n   * @param data The item's value\n   * @returns An RxJS `Observable` to wait the end of the operation\n   */\n  set(key: string, data: any): Observable<undefined> {\n\n    /* Storing `undefined` in `indexedDb` can cause issues in some browsers so removing item instead */\n    if (data === undefined) {\n      return this.delete(key);\n    }\n\n    /* Open a transaction in write mode */\n    return this.transaction('readwrite').pipe(\n      mergeMap((store) => {\n\n        /* Check if the key already exists or not\n         * `getKey()` is better but only available in `indexedDB` v2 (Chrome >= 58, missing in IE/Edge).\n         * In older browsers, the value is checked instead, but it could lead to an exception\n         * if `undefined` was stored outside of this lib (e.g. directly with the native `indexedDB` API).\n         */\n        const requestGet = this.getKeyRequest(store, key);\n\n        /* Manage success and error events, and get the request result */\n        return this.requestEventsAndMapTo(requestGet, () => requestGet.result).pipe(\n          mergeMap((existingEntry) => {\n\n            /* It is very important the second request is done from the same transaction/store as the previous one,\n             * otherwise it could lead to concurrency failures\n             * Avoid https://github.com/cyrilletuzi/angular-async-local-storage/issues/47 */\n\n            /* Prior to v8, data was wrapped in a `{ value: ... }` object */\n            const dataToStore = this.noWrap ? data : { [this.wrapIndex]: data };\n\n            /* Add if the item is not existing yet, or update otherwise */\n            const requestSet = (existingEntry === undefined) ?\n              store.add(dataToStore, key) :\n              store.put(dataToStore, key);\n\n            /* Manage success and error events, and map to `true` */\n            return this.requestEventsAndMapTo(requestSet, () => undefined);\n\n          }),\n        );\n      }),\n      /* The observable will complete after the first value */\n      first(),\n    );\n\n  }\n\n  /**\n   * Deletes an item in our `indexedDB` store\n   * @param key The item's key\n   * @returns An RxJS `Observable` to wait the end of the operation\n   */\n  delete(key: string): Observable<undefined> {\n\n    /* Open a transaction in write mode */\n    return this.transaction('readwrite').pipe(\n      mergeMap((store) => {\n\n        /* Deletethe item in store */\n        const request = store.delete(key);\n\n        /* Manage success and error events, and map to `true` */\n        return this.requestEventsAndMapTo(request, () => undefined);\n\n      }),\n      /* The observable will complete after the first value */\n      first(),\n    );\n\n  }\n\n  /**\n   * Deletes all items from our `indexedDB` objet store\n   * @returns An RxJS `Observable` to wait the end of the operation\n   */\n  clear(): Observable<undefined> {\n\n    /* Open a transaction in write mode */\n    return this.transaction('readwrite').pipe(\n      mergeMap((store) => {\n\n        /* Delete all items in object store */\n        const request = store.clear();\n\n        /* Manage success and error events, and map to `true` */\n        return this.requestEventsAndMapTo(request, () => undefined);\n\n      }),\n      /* The observable will complete */\n      first(),\n    );\n\n  }\n\n  /**\n   * Get all the keys in our `indexedDB` store\n   * @returns An RxJS `Observable` iterating on each key\n   */\n  keys(): Observable<string> {\n\n    /* Open a transaction in read-only mode */\n    return this.transaction('readonly').pipe(\n      /* `first()` is used as the final operator in other methods to complete the `Observable`\n       * (as it all starts from a `ReplaySubject` which never ends),\n       * but as this method is iterating over multiple values, `first()` **must** be used here */\n      first(),\n      mergeMap((store) => {\n\n        /* Open a cursor on the store\n         * `.openKeyCursor()` is better for performance, but only available in indexedDB v2 (missing in IE/Edge)\n         * Avoid issues like https://github.com/cyrilletuzi/angular-async-local-storage/issues/69 */\n        const request = ('openKeyCursor' in store) ? store.openKeyCursor() : (store as IDBObjectStore).openCursor();\n\n        /* Listen to success event */\n        const success$ = this.successEvent(request).pipe(\n          /* Stop the `Observable` when the cursor is `null` */\n          takeWhile(() => (request.result !== null)),\n          /* This lib only allows string keys, but user could have added other types of keys from outside\n           * It's OK to cast as the cursor as been tested in the previous operator */\n          map(() => (request.result as IDBCursor).key.toString()),\n          /* Iterate on the cursor */\n          tap(() => { (request.result as IDBCursor).continue(); }),\n        );\n\n        /* Listen to error event and if so, throw an error */\n        const error$ = this.errorEvent(request);\n\n        /* Choose the first event to occur */\n        return race([success$, error$]);\n\n      }),\n    );\n\n  }\n\n  /**\n   * Check if a key exists in our `indexedDB` store\n   * @returns An RxJS `Observable` telling if the key exists or not\n   */\n  has(key: string): Observable<boolean> {\n\n    /* Open a transaction in read-only mode */\n    return this.transaction('readonly').pipe(\n      mergeMap((store) => {\n\n        /* Check if the key exists in the store */\n        const request = this.getKeyRequest(store, key);\n\n        /* Manage success and error events, and map to a boolean based on the existence of the key */\n        return this.requestEventsAndMapTo(request, () => (request.result !== undefined) ? true : false);\n\n      }),\n      /* The observable will complete */\n      first()\n    );\n\n  }\n\n  /**\n   * Connects to `indexedDB` and creates the object store on first time\n   */\n  protected connect(): void {\n\n    let request: IDBOpenDBRequest;\n\n    /* Connect to `indexedDB`\n     * Will fail in Safari cross-origin iframes\n     * @see {@link https://github.com/cyrilletuzi/angular-async-local-storage/issues/42} */\n    try {\n\n      /* Do NOT explicit `window` here, as `indexedDB` could be used from a web worker too */\n      request = indexedDB.open(this.dbName, this.dbVersion);\n\n    }Â catch {\n\n      this.database.error(new IDBBrokenError());\n\n      return;\n\n    }\n\n    /* Create store on first connection */\n    this.createStore(request);\n\n    /* Listen to success and error events and choose the first to occur */\n    race([this.successEvent(request), this.errorEvent(request)])\n      /* The observable will complete */\n      .pipe(first())\n      .subscribe({\n        next: () => {\n          /* Register the database connection in the `ReplaySubject` for further access */\n          this.database.next(request.result);\n        },\n        error: () => {\n          /* Firefox private mode issue: fallback storage if IndexedDb connection is failing\n          * @see {@link https://bugzilla.mozilla.org/show_bug.cgi?id=781982}\n          * @see {@link https://github.com/cyrilletuzi/angular-async-local-storage/issues/26} */\n          this.database.error(new IDBBrokenError());\n        },\n      });\n\n  }\n\n  /**\n   * Create store on first use of `indexedDB`\n   * @param request `indexedDB` database opening request\n   */\n  protected createStore(request: IDBOpenDBRequest): void {\n\n    /* Listen to the event fired on first connection */\n    fromEvent(request, 'upgradeneeded')\n      /* The observable will complete */\n      .pipe(first())\n      .subscribe({\n        next: () => {\n\n          /* Check if the store already exists, to avoid error */\n          if (!request.result.objectStoreNames.contains(this.storeName)) {\n\n            /* Create the object store */\n            request.result.createObjectStore(this.storeName);\n\n          }\n\n        }\n      });\n\n  }\n\n  /**\n   * Open an `indexedDB` transaction and get our store\n   * @param mode `readonly` or `readwrite`\n   * @returns An `indexedDB` store, wrapped in an RxJS `Observable`\n   */\n  protected transaction(mode: IDBTransactionMode): Observable<IDBObjectStore> {\n\n    /* From the `indexedDB` connection, open a transaction and get the store */\n    return this.database\n      .pipe(mergeMap((database) => {\n\n        let store: IDBObjectStore;\n\n        try {\n\n          store = database.transaction([this.storeName], mode).objectStore(this.storeName);\n\n        } catch (error) {\n\n            /* The store could have been deleted from outside */\n            return throwError(error as DOMException);\n\n        }\n\n        return of(store);\n\n      }));\n\n  }\n\n  /**\n   * Listen to an `indexedDB` success error event\n   * @param request Request to listen\n   * @returns An RxJS `Observable` listening to the success event\n   */\n  protected successEvent(request: IDBRequest): Observable<Event> {\n\n    return fromEvent(request, 'success');\n\n  }\n\n  /**\n   * Listen to an `indexedDB` request error event\n   * @param request Request to listen\n   * @returns An RxJS `Observable` listening to the error event and if so, throwing an error\n   */\n  protected errorEvent(request: IDBRequest): Observable<never> {\n\n    return fromEvent(request, 'error').pipe(mergeMap(() => throwError(request.error as DOMException)));\n\n  }\n\n  /**\n   * Listen to an `indexedDB` request success and error event, and map to the wanted value\n   * @param request Request to listen\n   * @param mapCallback Callback returning the wanted value\n   * @returns An RxJS `Observable` listening to request events and mapping to the wanted value\n   */\n  protected requestEventsAndMapTo<T>(request: IDBRequest, mapCallback: () => T): Observable<T> {\n\n    /* Listen to the success event and map to the wanted value\n     * `mapTo()` must not be used here as it would eval `request.result` too soon */\n    const success$ = this.successEvent(request).pipe(map(mapCallback));\n\n    /* Listen to the error event */\n    const error$ = this.errorEvent(request);\n\n    /* Choose the first event to occur */\n    return race([success$, error$]);\n\n  }\n\n  /**\n   * Check if the key exists in the store\n   * @param store Objet store on which to perform the request\n   * @param key Key to check\n   * @returns An `indexedDB` request\n   */\n  protected getKeyRequest(store: IDBObjectStore, key: string): IDBRequest {\n\n    /* `getKey()` is better but only available in `indexedDB` v2 (Chrome >= 58, missing in IE/Edge).\n     * In older browsers, the value is checked instead, but it could lead to an exception\n     * if `undefined` was stored outside of this lib (e.g. directly with the native `indexedDB` API).\n     * Fixes https://github.com/cyrilletuzi/angular-async-local-storage/issues/69\n     */\n    return ('getKey' in store) ? store.getKey(key) : (store as IDBObjectStore).get(key);\n\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { Observable, of, throwError, asyncScheduler } from 'rxjs';\nimport { observeOn } from 'rxjs/operators';\n\nimport { LocalDatabase } from './local-database';\nimport { SerializationError } from './exceptions';\nimport { LOCAL_STORAGE_PREFIX, LS_PREFIX } from '../tokens';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LocalStorageDatabase implements LocalDatabase {\n\n  /**\n   * Optional user prefix to avoid collision for multiple apps on the same subdomain\n   */\n  readonly prefix: string;\n\n  /**\n   * Constructor params are provided by Angular (but can also be passed manually in tests)\n   * @param prefix Prefix option to avoid collision for multiple apps on the same subdomain or for interoperability\n   * @param oldPrefix Prefix option prior to v8 to avoid collision for multiple apps on the same subdomain or for interoperability\n   */\n  constructor(\n    @Inject(LS_PREFIX) prefix = '',\n    // tslint:disable-next-line: deprecation\n    @Inject(LOCAL_STORAGE_PREFIX) oldPrefix = '',\n  ) {\n\n    /* Priority for the new prefix option, otherwise old prefix with separator, or no prefix */\n    this.prefix = prefix || (oldPrefix ? `${oldPrefix}_` : '');\n\n  }\n\n  /**\n   * Number of items in `localStorage`\n   */\n  get size(): Observable<number> {\n\n    /* Wrap in a RxJS `Observable` to be consistent with other storages */\n    return of(localStorage.length);\n\n  }\n\n  /**\n   * Gets an item value in `localStorage`\n   * @param key The item's key\n   * @returns The item's value if the key exists, `undefined` otherwise, wrapped in a RxJS `Observable`\n   */\n  get<T = any>(key: string): Observable<T | undefined> {\n\n    /* Get raw data */\n    const unparsedData = localStorage.getItem(this.prefixKey(key));\n\n    let parsedData: T | undefined;\n\n    /* No need to parse if data is `null` or `undefined` */\n    if ((unparsedData !== undefined) && (unparsedData !== null)) {\n\n      /* Try to parse */\n      try {\n        parsedData = JSON.parse(unparsedData) as T;\n      } catch (error) {\n        return throwError(error as SyntaxError);\n      }\n\n    }\n\n    /* Wrap in a RxJS `Observable` to be consistent with other storages */\n    return of(parsedData);\n\n  }\n\n  /**\n   * Store an item in `localStorage`\n   * @param key The item's key\n   * @param data The item's value\n   * @returns A RxJS `Observable` to wait the end of the operation\n   */\n  set(key: string, data: any): Observable<undefined> {\n\n    let serializedData: string | null = null;\n\n    /* Check if data can be serialized */\n    const dataPrototype = Object.getPrototypeOf(data);\n    if ((typeof data === 'object') && (data !== null) && !Array.isArray(data) &&\n    !((dataPrototype === Object.prototype) || (dataPrototype === null))) {\n      return throwError(new SerializationError());\n    }\n\n    /* Try to stringify (can fail on circular references) */\n    try {\n      serializedData = JSON.stringify(data);\n    } catch (error) {\n      return throwError(error as TypeError);\n    }\n\n    /* Can fail if storage quota is exceeded */\n    try {\n      localStorage.setItem(this.prefixKey(key), serializedData);\n    } catch (error) {\n      return throwError(error as DOMException);\n    }\n\n    /* Wrap in a RxJS `Observable` to be consistent with other storages */\n    return of(undefined);\n\n  }\n\n  /**\n   * Deletes an item in `localStorage`\n   * @param key The item's key\n   * @returns A RxJS `Observable` to wait the end of the operation\n   */\n  delete(key: string): Observable<undefined> {\n\n    localStorage.removeItem(this.prefixKey(key));\n\n    /* Wrap in a RxJS `Observable` to be consistent with other storages */\n    return of(undefined);\n\n  }\n\n  /**\n   * Deletes all items in `localStorage`\n   * @returns A RxJS `Observable` to wait the end of the operation\n   */\n  clear(): Observable<undefined> {\n\n    localStorage.clear();\n\n    /* Wrap in a RxJS `Observable` to be consistent with other storages */\n    return of(undefined);\n\n  }\n\n  /**\n   * Get all keys in `localStorage`\n   * Note the order of the keys may be inconsistent in Firefox\n   * @returns A RxJS `Observable` iterating on keys\n   */\n  keys(): Observable<string> {\n\n    /* Create an `Observable` from keys */\n    return new Observable<string>((subscriber) => {\n\n      /* Iteretate over all the indexes */\n      for (let index = 0; index < localStorage.length; index += 1) {\n\n        /* Cast as we are sure in this case the key is not `null` */\n        subscriber.next(this.getUnprefixedKey(index) as string);\n\n      }\n\n      subscriber.complete();\n\n    }).pipe(\n      /* Required to work like other databases which are asynchronous */\n      observeOn(asyncScheduler),\n    );\n\n  }\n\n  /**\n   * Check if a key exists in `localStorage`\n   * @param key The item's key\n   * @returns A RxJS `Observable` telling if the key exists or not\n   */\n  has(key: string): Observable<boolean> {\n\n    /* ItÃ©rate over all indexes in storage */\n    for (let index = 0; index < localStorage.length; index += 1) {\n\n      if (key === this.getUnprefixedKey(index))Â {\n\n        /* Wrap in a RxJS `Observable` to be consistent with other storages */\n        return of(true);\n\n      }\n\n    }\n\n    /* Wrap in a RxJS `Observable` to be consistent with other storages */\n    return of(false);\n\n  }\n\n  /**\n   * Get an unprefixed key\n   * @param index Index of the key\n   * @returns The unprefixed key name if exists, `null` otherwise\n   */\n  protected getUnprefixedKey(index: number): string | null {\n\n    /* Get the key in storage: may have a prefix */\n    const prefixedKey = localStorage.key(index);\n\n    if (prefixedKey !== null) {\n\n      /* If no prefix, the key is already good, otherwrite strip the prefix */\n      return !this.prefix ? prefixedKey : prefixedKey.substr(this.prefix.length);\n\n    }\n\n    return null;\n\n  }\n\n  /**\n   * Add the prefix to a key\n   * @param key The key name\n   * @returns The prefixed key name\n   */\n  protected prefixKey(key: string): string {\n\n    return `${this.prefix}${key}`;\n\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of, from } from 'rxjs';\n\nimport { LocalDatabase } from './local-database';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MemoryDatabase implements LocalDatabase {\n\n  /**\n   * Memory storage\n   */\n  protected memoryStorage = new Map<string, any>();\n\n  /**\n   * Number of items in memory\n   */\n  get size(): Observable<number> {\n\n    /* Wrap in a RxJS `Observable` to be consistent with other storages */\n    return of(this.memoryStorage.size);\n\n  }\n\n  /**\n   * Gets an item value in memory\n   * @param key The item's key\n   * @returns The item's value if the key exists, `undefined` otherwise, wrapped in a RxJS `Observable`\n   */\n   get<T = any>(key: string): Observable<T | undefined> {\n\n    const rawData = this.memoryStorage.get(key) as T | undefined;\n\n    /* Wrap in a RxJS `Observable` to be consistent with other storages */\n    return of(rawData);\n\n  }\n\n  /**\n   * Sets an item in memory\n   * @param key The item's key\n   * @param data The item's value\n   * @returns A RxJS `Observable` to wait the end of the operation\n   */\n   set(key: string, data: any): Observable<undefined> {\n\n    this.memoryStorage.set(key, data);\n\n    /* Wrap in a RxJS `Observable` to be consistent with other storages */\n    return of(undefined);\n\n  }\n\n  /**\n   * Deletes an item in memory\n   * @param key The item's key\n   * @returns A RxJS `Observable` to wait the end of the operation\n   */\n   delete(key: string): Observable<undefined> {\n\n    this.memoryStorage.delete(key);\n\n    /* Wrap in a RxJS `Observable` to be consistent with other storages */\n    return of(undefined);\n\n  }\n\n  /**\n   * Deletes all items in memory\n   * @returns A RxJS `Observable` to wait the end of the operation\n   */\n   clear(): Observable<undefined> {\n\n    this.memoryStorage.clear();\n\n    /* Wrap in a RxJS `Observable` to be consistent with other storages */\n    return of(undefined);\n\n  }\n\n  /**\n   * Get all keys in memory\n   * @returns A RxJS `Observable` iterating on keys\n   */\n  keys(): Observable<string> {\n\n    /* Create an `Observable` from keys */\n    return from(this.memoryStorage.keys());\n\n  }\n\n  /**\n   * Check if a key exists in memory\n   * @param key Key name\n   * @returns a RxJS `Observable` telling if the key exists or not\n   */\n  has(key: string): Observable<boolean> {\n\n    /* Wrap in a RxJS `Observable` to be consistent with other storages */\n    return of(this.memoryStorage.has(key));\n\n  }\n\n}\n","import { Injectable, PLATFORM_ID } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { Observable } from 'rxjs';\n\nimport { IndexedDBDatabase } from './indexeddb-database';\nimport { LocalStorageDatabase } from './localstorage-database';\nimport { MemoryDatabase } from './memory-database';\nimport { IDB_STORE_NAME, IDB_DB_NAME, LOCAL_STORAGE_PREFIX, LS_PREFIX, IDB_DB_VERSION, IDB_NO_WRAP } from '../tokens';\n\n/**\n * Factory to create a storage according to browser support\n * @param platformId Context about the platform (`browser`, `server`...)\n * @param LSPrefix Prefix for `localStorage` keys to avoid collision for multiple apps on the same subdomain\n * @param IDBDBName `indexedDB` database name\n * @param IDBstoreName `indexedDB` storeName name\n * @param oldPrefix Prefix option prior to v8 to avoid collision for multiple apps on the same subdomain\n * @see {@link https://github.com/cyrilletuzi/angular-async-local-storage/blob/master/docs/BROWSERS_SUPPORT.md}\n */\nexport function localDatabaseFactory(\n  platformId: string, LSPrefix: string, IDBDBName: string, IDBStoreName: string,\n  IDBDBVersion: number, IDBNoWrap: boolean, oldPrefix: string): LocalDatabase {\n\n  /* When storage is fully disabled in browser (via the \"Block all cookies\" option),\n   * just trying to check `indexedDB` or `localStorage` variables causes a security exception.\n   * Prevents https://github.com/cyrilletuzi/angular-async-local-storage/issues/118\n   */\n  try {\n\n    // Do not explicit `window` here, as the global object is not the same in web workers\n    if (isPlatformBrowser(platformId) && (indexedDB !== undefined) && (indexedDB !== null) && ('open' in indexedDB)) {\n\n      /* Check:\n      * - if we are in a browser context (issue: server-side rendering)\n      * - if `indexedDB` exists (issue: IE9)\n      * - it could exist but be `undefined` or `null` (issue: IE / Edge private mode)\n      * - it could exists but not having a working API\n      * Will be the case for:\n      * - IE10+ and all other browsers in normal mode\n      * - Chromium / Safari private mode, but in this case, data will be swiped when the user leaves the app */\n      return new IndexedDBDatabase(IDBDBName, IDBStoreName, IDBDBVersion, IDBNoWrap, oldPrefix);\n\n    } else if (isPlatformBrowser(platformId)\n    && (localStorage !== undefined) && (localStorage !== null) && ('getItem' in localStorage)) {\n\n      /* Check:\n      * - if we are in a browser context (issue: server-side rendering)\n      * - if `localStorage` exists (to be sure)\n      * - it could exists but not having a working API\n      * Will be the case for:\n      * - IE9\n      * - Safari cross-origin iframes, detected later in `IndexedDBDatabase.connect()`\n      * @see {@link https://github.com/cyrilletuzi/angular-async-local-storage/issues/42}\n      * - IE / Edge / Firefox private mode, but in this case, data will be swiped when the user leaves the app\n      * For Firefox, can only be detected later in `IndexedDBDatabase.connect()`\n      * @see {@link https://bugzilla.mozilla.org/show_bug.cgi?id=781982}\n      */\n      return new LocalStorageDatabase(LSPrefix, oldPrefix);\n\n    }\n\n  } catch {}\n\n  /* Will be the case for:\n   * - In browsers if storage has been fully disabled (via the \"Block all cookies\" option)\n   * - Server-side rendering\n   * - All other non-browser context\n   */\n  return new MemoryDatabase();\n\n}\n\n@Injectable({\n  providedIn: 'root',\n  useFactory: localDatabaseFactory,\n  deps: [\n    PLATFORM_ID,\n    LS_PREFIX,\n    IDB_DB_NAME,\n    IDB_STORE_NAME,\n    IDB_DB_VERSION,\n    IDB_NO_WRAP,\n    // tslint:disable-next-line: deprecation\n    LOCAL_STORAGE_PREFIX,\n  ]\n})\nexport abstract class LocalDatabase {\n\n  abstract readonly size: Observable<number>;\n\n  abstract get<T = any>(key: string): Observable<T | undefined>;\n  abstract set(key: string, data: any): Observable<undefined>;\n  abstract delete(key: string): Observable<undefined>;\n  abstract clear(): Observable<undefined>;\n  abstract keys(): Observable<string>;\n  abstract has(key: string): Observable<boolean>;\n\n}\n","/**\n * Exception message when a value is not valid against the JSON schema\n */\nexport const VALIDATION_ERROR = `Data stored is not valid against the provided JSON schema.\nCheck your JSON schema, otherwise it means data has been corrupted.`;\n\n/**\n * Exception raised when a value is not valid against the JSON schema\n */\nexport class ValidationError extends Error {\n  message = VALIDATION_ERROR;\n}\n","import { Injectable } from '@angular/core';\nimport {\n  JSONSchema, JSONSchemaString, JSONSchemaInteger, JSONSchemaNumber, JSONSchemaBoolean,\n  JSONSchemaArray, JSONSchemaObject\n} from './json-schema';\n\n// TODO: detailed error messages?\n@Injectable({\n  providedIn: 'root'\n})\nexport class JSONValidator {\n\n  /**\n   * Validate a JSON data against a Jsubset of the JSON Schema standard.\n   * Types are enforced to validate everything: each schema must\n   * @param data JSON data to validate\n   * @param schema Subset of JSON Schema. Must have a `type`.\n   * @returns If data is valid: `true`, if it is invalid: `false`\n   * @see {@link https://github.com/cyrilletuzi/angular-async-local-storage/blob/master/docs/VALIDATION.md}\n   */\n  validate(data: any, schema: JSONSchema): boolean {\n\n    switch (schema.type) {\n\n      case 'string':\n        return this.validateString(data, schema);\n      case 'number':\n      case 'integer':\n        return this.validateNumber(data, schema);\n      case 'boolean':\n        return this.validateBoolean(data, schema);\n      case 'array':\n        return this.validateArray(data, schema);\n      case 'object':\n        return this.validateObject(data, schema);\n\n    }\n\n  }\n\n  /**\n   * Validate a string\n   * @param data Data to validate\n   * @param schema Schema describing the string\n   * @returns If data is valid: `true`, if it is invalid: `false`\n   */\n  protected validateString(data: any, schema: JSONSchemaString): boolean {\n\n    if (typeof data !== 'string') {\n      return false;\n    }\n\n    if (!this.validateConst(data, schema)) {\n      return false;\n    }\n\n    if (!this.validateEnum(data, schema)) {\n      return false;\n    }\n\n    if ((schema.maxLength !== undefined) && (data.length > schema.maxLength)) {\n      return false;\n    }\n\n    if ((schema.minLength !== undefined) && (data.length < schema.minLength)) {\n      return false;\n    }\n\n    if (schema.pattern) {\n\n      let regularExpression: RegExp | null = null;\n\n      try {\n        regularExpression = new RegExp(schema.pattern);\n      } catch {}\n\n      if (regularExpression && !regularExpression.test(data)) {\n        return false;\n      }\n\n    }\n\n    return true;\n\n  }\n\n  /**\n   * Validate a number or an integer\n   * @param data Data to validate\n   * @param schema Schema describing the number or integer\n   * @returns If data is valid: `true`, if it is invalid: `false`\n   */\n  protected validateNumber(data: any, schema: JSONSchemaNumber |Â JSONSchemaInteger): boolean {\n\n    if (typeof data !== 'number') {\n      return false;\n    }\n\n    if ((schema.type === 'integer') && !Number.isInteger(data)) {\n      return false;\n    }\n\n    if (!this.validateConst(data, schema)) {\n      return false;\n    }\n\n    if (!this.validateEnum(data, schema)) {\n      return false;\n    }\n\n    /* Test is done this way to not divide by 0 */\n    if (schema.multipleOf && !Number.isInteger(data / schema.multipleOf)) {\n      return false;\n    }\n\n    if ((schema.maximum !== undefined) && (data > schema.maximum)) {\n        return false;\n    }\n\n    if ((schema.exclusiveMaximum !== undefined) && (data >= schema.exclusiveMaximum)) {\n      return false;\n\n    }\n\n    if ((schema.minimum !== undefined) && (data < schema.minimum)) {\n      return false;\n\n    }\n\n    if ((schema.exclusiveMinimum !== undefined) && (data <= schema.exclusiveMinimum)) {\n        return false;\n    }\n\n    return true;\n\n  }\n\n  /**\n   * Validate a boolean\n   * @param data Data to validate\n   * @param schema Schema describing the boolean\n   * @returns If data is valid: `true`, if it is invalid: `false`\n   */\n  protected validateBoolean(data: any, schema: JSONSchemaBoolean): boolean {\n\n    if (typeof data !== 'boolean') {\n      return false;\n    }\n\n    if (!this.validateConst(data, schema)) {\n      return false;\n    }\n\n    return true;\n\n  }\n\n  /**\n   * Validate an array\n   * @param data Data to validate\n   * @param schema Schema describing the array\n   * @returns If data is valid: `true`, if it is invalid: `false`\n   */\n  protected validateArray(data: any[], schema: JSONSchemaArray): boolean {\n\n    if (!Array.isArray(data)) {\n      return false;\n    }\n\n    if ((schema.maxItems !== undefined) && (data.length > schema.maxItems)) {\n      return false;\n    }\n\n    if ((schema.minItems !== undefined) && (data.length < schema.minItems)) {\n      return false;\n    }\n\n    if (schema.uniqueItems) {\n\n      /* Create a set to eliminate values with multiple occurences */\n      const dataSet = new Set(data);\n\n      if (data.length !== dataSet.size) {\n        return false;\n      }\n\n    }\n\n    /* Specific test for tuples */\n    if (Array.isArray(schema.items)) {\n\n      return this.validateTuple(data, schema.items);\n\n    }\n\n    /* Validate all the values in array */\n    for (const value of data) {\n\n      if (!this.validate(value, schema.items)) {\n        return false;\n      }\n\n    }\n\n    return true;\n\n  }\n\n  /**\n   * Validate a tuple (array with fixed length and multiple types)\n   * @param data Data to validate\n   * @param schemas Schemas describing the tuple\n   * @returns If data is valid: `true`, if it is invalid: `false`\n   */\n  protected validateTuple(data: any[], schemas: JSONSchema[]): boolean {\n\n    /* Tuples have a fixed length */\n    if (data.length !== schemas.length) {\n\n      return false;\n\n    }\n\n    for (let i = 0; i < schemas.length; i += 1) {\n\n      if (!this.validate(data[i], schemas[i])) {\n        return false;\n      }\n\n    }\n\n    return true;\n\n  }\n\n  /**\n   * Validate an object\n   * @param data Data to validate\n   * @param schema JSON schema describing the object\n   * @returns If data is valid: `true`, if it is invalid: `false`\n   */\n  protected validateObject(data: { [k: string]: any; }, schema: JSONSchemaObject): boolean {\n\n    /* Check the type and if not `null` as `null` also have the type `object` in old browsers */\n    if ((data === null) || (typeof data !== 'object')) {\n      return false;\n    }\n\n    /* Check if the object doesn't have more properties than expected\n     * Equivalent of `additionalProperties: false`\n     */\n    if (Object.keys(schema.properties).length < Object.keys(data).length) {\n      return false;\n    }\n\n    /* Validate required properties */\n    if (schema.required) {\n\n      for (const requiredProp of schema.required) {\n\n        if (!data.hasOwnProperty(requiredProp)) {\n          return false;\n        }\n\n      }\n\n    }\n\n    /* Recursively validate all properties */\n    for (const property in schema.properties) {\n\n      /* Filter to keep only real properties (no internal JS stuff) and check if the data has the property too */\n      if (schema.properties.hasOwnProperty(property) && data.hasOwnProperty(property)) {\n\n        if (!this.validate(data[property], schema.properties[property])) {\n          return false;\n        }\n\n      }\n\n    }\n\n    return true;\n\n  }\n\n  /**\n   * Validate a constant\n   * @param data Data ta validate\n   * @param schema JSON schema describing the constant\n   * @returns If data is valid: `true`, if it is invalid: `false`\n   */\n  protected validateConst(data: any, schema: JSONSchemaBoolean | JSONSchemaInteger | JSONSchemaNumber | JSONSchemaString): boolean {\n\n    if (!schema.const) {\n      return true;\n    }\n\n    return (data === schema.const);\n\n  }\n\n  /**\n   * Validate an enum\n   * @param data Data ta validate\n   * @param schema JSON schema describing the enum\n   * @returns If data is valid: `true`, if it is invalid: `false`\n   */\n  protected validateEnum(data: any, schema: JSONSchemaInteger | JSONSchemaNumber | JSONSchemaString): boolean {\n\n    if (!schema.enum) {\n      return true;\n    }\n\n    /* Cast as the data can be of multiple types, and so TypeScript is lost */\n    return ((schema.enum as any[]).includes(data));\n\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { Observable, throwError, of, OperatorFunction } from 'rxjs';\nimport { mergeMap, catchError } from 'rxjs/operators';\n\nimport { ValidationError } from './exceptions';\nimport {\n  JSONSchema, JSONSchemaBoolean, JSONSchemaInteger,\n  JSONSchemaNumber, JSONSchemaString, JSONSchemaArrayOf, JSONValidator\n} from '../validation';\nimport { LocalDatabase, IDB_BROKEN_ERROR, LocalStorageDatabase, IndexedDBDatabase, MemoryDatabase } from '../databases';\nimport { LS_PREFIX, LOCAL_STORAGE_PREFIX } from '../tokens';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StorageMap {\n\n  /**\n   * Constructor params are provided by Angular (but can also be passed manually in tests)\n   * @param database Storage to use\n   * @param jsonValidator Validator service\n   * @param LSPrefix Prefix for `localStorage` keys to avoid collision for multiple apps on the same subdomain or for interoperability\n   * @param oldPrefix Prefix option prior to v8 to avoid collision for multiple apps on the same subdomain or for interoperability\n   */\n  constructor(\n    protected database: LocalDatabase,\n    protected jsonValidator: JSONValidator = new JSONValidator(),\n    @Inject(LS_PREFIX) protected LSPrefix = '',\n    // tslint:disable-next-line: deprecation\n    @Inject(LOCAL_STORAGE_PREFIX) protected oldPrefix = '',\n  ) {}\n\n  /**\n   * **Number of items** in storage, wrapped in an `Observable`.\n   *\n   * @example\n   * this.storageMap.size.subscribe((size) => {\n   *   console.log(size);\n   * });\n   */\n  get size(): Observable<number> {\n\n    return this.database.size;\n\n  }\n\n  /**\n   * Tells you which storage engine is used. *Only useful for interoperability.*\n   * Note that due to some browsers issues in some special contexts\n   * (Firefox private mode and Safari cross-origin iframes),\n   * **this information may be wrong at initialization,**\n   * as the storage could fallback from `indexedDB` to `localStorage`\n   * only after a first read or write operation.\n   * @returns Storage engine used\n   *\n   * @see {@link https://github.com/cyrilletuzi/angular-async-local-storage/blob/master/docs/INTEROPERABILITY.md}\n   *\n   * @example\n   * if (this.storageMap.backingEngine === 'indexedDB') {}\n   */\n  get backingEngine(): 'indexedDB' | 'localStorage' |Â 'memory' | 'unknown' {\n\n    if (this.database instanceof IndexedDBDatabase) {\n\n      return 'indexedDB';\n\n    } else if (this.database instanceof LocalStorageDatabase) {\n\n      return 'localStorage';\n\n    } else if (this.database instanceof MemoryDatabase) {\n\n      return 'memory';\n\n    } else {\n\n      return 'unknown';\n\n    }\n\n  }\n\n  /**\n   * Info about `indexedDB` database. *Only useful for interoperability.*\n   * @returns `indexedDB` database name, store name and database version.\n   * **Values will be empty if the storage is not `indexedDB`,**\n   * **so it should be used after an engine check**.\n   *\n   * @see {@link https://github.com/cyrilletuzi/angular-async-local-storage/blob/master/docs/INTEROPERABILITY.md}\n   *\n   * @example\n   * if (this.storageMap.backingEngine === 'indexedDB') {\n   *   const { database, store, version } = this.storageMap.backingStore;\n   * }\n   */\n  get backingStore(): { database: string, store: string, version: number } {\n\n    return (this.database instanceof IndexedDBDatabase) ?\n      this.database.backingStore :\n      { database: '', store: '', version: 0 };\n\n  }\n\n  /**\n   * Info about `localStorage` fallback storage. *Only useful for interoperability.*\n   * @returns `localStorage` prefix.\n   * **Values will be empty if the storage is not `localStorage`,**\n   * **so it should be used after an engine check**.\n   *\n   * @see {@link https://github.com/cyrilletuzi/angular-async-local-storage/blob/master/docs/INTEROPERABILITY.md}\n   *\n   * @example\n   * if (this.storageMap.backingEngine === 'localStorage') {\n   *   const { prefix } = this.storageMap.fallbackBackingStore;\n   * }\n   */\n  get fallbackBackingStore(): { prefix: string } {\n\n    return (this.database instanceof LocalStorageDatabase) ?\n      { prefix: this.database.prefix } :\n      { prefix: '' };\n\n  }\n\n  /**\n   * Get an item value in storage.\n   * The signature has many overloads due to validation, **please refer to the documentation.**\n   * @see {@link https://github.com/cyrilletuzi/angular-async-local-storage/blob/master/docs/VALIDATION.md}\n   * @param key The item's key\n   * @param schema Optional JSON schema to validate the data\n   * @returns The item's value if the key exists, `undefined` otherwise, wrapped in a RxJS `Observable`\n   *\n   * @example\n   * this.storageMap.get('key', { type: 'string' }).subscribe((result) => {\n   *   result; // string or undefined\n   * });\n   *\n   * @example\n   * interface User {\n   *   firstName: string;\n   *   lastName?: string;\n   * }\n   *\n   * const schema = {\n   *   type: 'object',\n   *   properties: {\n   *     firstName: { type: 'string' },\n   *     lastName: { type: 'string' },\n   *   },\n   *   required: ['firstName']\n   * };\n   *\n   * this.storageMap.get<User>('user', schema).subscribe((user) => {\n   *   if (user) {\n   *     user.firstName;\n   *   }\n   * });\n   */\n  get<T = string>(key: string, schema: JSONSchemaString): Observable<string | undefined>;\n  get<T = number>(key: string, schema: JSONSchemaIntegerÂ | JSONSchemaNumber): Observable<number | undefined>;\n  get<T = boolean>(key: string, schema: JSONSchemaBoolean): Observable<boolean | undefined>;\n  get<T = string[]>(key: string, schema: JSONSchemaArrayOf<JSONSchemaString>): Observable<string[] | undefined>;\n  get<T = number[]>(key: string, schema: JSONSchemaArrayOf<JSONSchemaIntegerÂ | JSONSchemaNumber>): Observable<number[] | undefined>;\n  get<T = boolean[]>(key: string, schema: JSONSchemaArrayOf<JSONSchemaBoolean>): Observable<boolean[] | undefined>;\n  get<T = any>(key: string, schema: JSONSchema): Observable<T | undefined>;\n  get<T = unknown>(key: string, schema?: JSONSchema): Observable<unknown>;\n  get<T = any>(key: string, schema?: JSONSchema) {\n\n    /* Get the data in storage */\n    return this.database.get<T>(key).pipe(\n      /* Check if `indexedDb` is broken */\n      this.catchIDBBroken(() => this.database.get<T>(key)),\n      mergeMap((data) => {\n\n        /* No need to validate if the data is empty */\n        if ((data === undefined) || (data === null)) {\n\n          return of(undefined);\n\n        } else if (schema) {\n\n          /* Validate data against a JSON schema if provided */\n          if (!this.jsonValidator.validate(data, schema)) {\n            return throwError(new ValidationError());\n          }\n\n          /* Data have been checked, so it's OK to cast */\n          return of(data as T | undefined);\n\n        }\n\n        /* Cast to unknown as the data wasn't checked */\n        return of(data as unknown);\n\n      }),\n    );\n\n  }\n\n  /**\n   * Set an item in storage.\n   * Note that setting `null` or `undefined` will remove the item to avoid some browsers issues.\n   * @param key The item's key\n   * @param data The item's value\n   * @param schema Optional JSON schema to validate the data\n   * @returns A RxJS `Observable` to wait the end of the operation\n   *\n   * @example\n   * this.storageMap.set('key', 'value').subscribe(() => {});\n   */\n  set(key: string, data: any, schema?: JSONSchema): Observable<undefined> {\n\n    /* Storing `undefined` or `null` is useless and can cause issues in `indexedDb` in some browsers,\n     * so removing item instead for all storages to have a consistent API */\n    if ((data === undefined) || (data === null)) {\n      return this.delete(key);\n    }\n\n    /* Validate data against a JSON schema if provided */\n    if (schema && !this.jsonValidator.validate(data, schema)) {\n      return throwError(new ValidationError());\n    }\n\n    return this.database.set(key, data)\n      /* Catch if `indexedDb` is broken */\n      .pipe(this.catchIDBBroken(() => this.database.set(key, data)));\n\n  }\n\n  /**\n   * Delete an item in storage\n   * @param key The item's key\n   * @returns A RxJS `Observable` to wait the end of the operation\n   *\n   * @example\n   * this.storageMap.delete('key').subscribe(() => {});\n   */\n  delete(key: string): Observable<undefined> {\n\n    return this.database.delete(key)\n      /* Catch if `indexedDb` is broken */\n      .pipe(this.catchIDBBroken(() => this.database.delete(key)));\n\n  }\n\n  /**\n   * Delete all items in storage\n   * @returns A RxJS `Observable` to wait the end of the operation\n   *\n   * @example\n   * this.storageMap.clear().subscribe(() => {});\n   */\n  clear(): Observable<undefined> {\n\n    return this.database.clear()\n      /* Catch if `indexedDb` is broken */\n      .pipe(this.catchIDBBroken(() => this.database.clear()));\n\n  }\n\n  /**\n   * Get all keys stored in storage. Note **this is an *iterating* `Observable`**:\n   * * if there is no key, the `next` callback will not be invoked,\n   * * if you need to wait the whole operation to end, be sure to act in the `complete` callback,\n   * as this `Observable` can emit several values and so will invoke the `next` callback several times.\n   * @returns A list of the keys wrapped in a RxJS `Observable`\n   *\n   * @example\n   * this.storageMap.keys().subscribe({\n   *   next: (key) => { console.log(key); },\n   *   complete: () => { console.log('Done'); },\n   * });\n   */\n  keys(): Observable<string> {\n\n    return this.database.keys()\n      /* Catch if `indexedDb` is broken */\n      .pipe(this.catchIDBBroken(() => this.database.keys()));\n\n  }\n\n  /**\n   * Tells if a key exists in storage\n   * @returns A RxJS `Observable` telling if the key exists\n   *\n   * @example\n   * this.storageMap.has('key').subscribe((hasKey) => {\n   *   if (hasKey) {}\n   * });\n   */\n  has(key: string): Observable<boolean> {\n\n    return this.database.has(key)\n      /* Catch if `indexedDb` is broken */\n      .pipe(this.catchIDBBroken(() => this.database.has(key)));\n\n  }\n\n  /**\n   * RxJS operator to catch if `indexedDB` is broken\n   * @param operationCallback Callback with the operation to redo\n   */\n  protected catchIDBBroken<T>(operationCallback: () => Observable<T>): OperatorFunction<T, T> {\n\n    return catchError((error) => {\n\n      /* Check if `indexedDB` is broken based on error message (the specific error class seems to be lost in the process) */\n      if ((error !== undefined) && (error !== null) && (error.message === IDB_BROKEN_ERROR)) {\n\n        /* When storage is fully disabled in browser (via the \"Block all cookies\" option),\n         * just trying to check `localStorage` variable causes a security exception.\n         * Prevents https://github.com/cyrilletuzi/angular-async-local-storage/issues/118\n         */\n        try {\n\n          if ('getItem' in localStorage) {\n\n            /* Fallback to `localStorage` if available */\n            this.database = new LocalStorageDatabase(this.LSPrefix, this.oldPrefix);\n\n          } else {\n\n            /* Fallback to memory storage otherwise */\n            this.database = new MemoryDatabase();\n\n          }\n\n        } catch {\n\n          /* Fallback to memory storage otherwise */\n          this.database = new MemoryDatabase();\n\n        }\n\n        /* Redo the operation */\n        return operationCallback();\n\n      } else {\n\n        /* Otherwise, rethrow the error */\n        return throwError(error);\n\n      }\n\n    });\n\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { mapTo, toArray, map } from 'rxjs/operators';\n\nimport { StorageMap } from './storage-map.service';\nimport { JSONSchema, JSONSchemaBoolean, JSONSchemaInteger, JSONSchemaNumber, JSONSchemaString, JSONSchemaArrayOf } from '../validation';\n\n/**\n * @deprecated Will be removed in v9\n */\nexport interface LSGetItemOptions {\n\n  /**\n   * Subset of the JSON Schema standard.\n   * Types are enforced to validate everything: each value **must** have a `type`.\n   * @see {@link https://github.com/cyrilletuzi/angular-async-local-storage/blob/master/docs/VALIDATION.md}\n   */\n  schema?: JSONSchema | null;\n\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LocalStorage {\n\n  /**\n   * Number of items in storage\n   * @deprecated Use `.length`, or use `.size` via the new `StorageMap` service. Will be removed in v9.\n   */\n  get size(): Observable<number> {\n\n    return this.length;\n\n  }\n\n  /**\n   * Number of items in storage wrapped in an `Observable`\n   *\n   * @example\n   * this.localStorage.length.subscribe((length) => {\n   *   console.log(length);\n   * });\n   */\n  get length(): Observable<number> {\n\n    return this.storageMap.size;\n\n  }\n\n  /* Use the `StorageMap` service to avoid code duplication */\n  constructor(protected storageMap: StorageMap) {}\n\n  /**\n   * Get an item value in storage.\n   * The signature has many overloads due to validation, **please refer to the documentation.**\n   * @see {@link https://github.com/cyrilletuzi/angular-async-local-storage/blob/master/docs/VALIDATION.md}\n   * @param key The item's key\n   * @param schema Optional JSON schema to validate the data.\n   * **Note you must pass the schema directly as the second argument.**\n   * **Passing the schema in an object `{ schema }` is deprecated and only here**\n   * **for backward compatibility: it will be removed in v9.**\n   * @returns The item's value if the key exists, `null` otherwise, wrapped in a RxJS `Observable`\n   *\n   * @example\n   * this.localStorage.get('key', { type: 'string' }).subscribe((result) => {\n   *   result; // string or null\n   * });\n   *\n   * @example\n   * interface User {\n   *   firstName: string;\n   *   lastName?: string;\n   * }\n   *\n   * const schema = {\n   *   type: 'object',\n   *   properties: {\n   *     firstName: { type: 'string' },\n   *     lastName: { type: 'string' },\n   *   },\n   *   required: ['firstName']\n   * };\n   *\n   * this.localStorage.get<User>('user', schema).subscribe((user) => {\n   *   if (user) {\n   *     user.firstName;\n   *   }\n   * });\n   */\n  getItem<T = string>(key: string, schema: JSONSchemaString): Observable<string | null>;\n  getItem<T = number>(key: string, schema: JSONSchemaIntegerÂ | JSONSchemaNumber): Observable<number | null>;\n  getItem<T = boolean>(key: string, schema: JSONSchemaBoolean): Observable<boolean | null>;\n  getItem<T = string[]>(key: string, schema: JSONSchemaArrayOf<JSONSchemaString>): Observable<string[] | null>;\n  getItem<T = number[]>(key: string, schema: JSONSchemaArrayOf<JSONSchemaIntegerÂ | JSONSchemaNumber>): Observable<number[] | null>;\n  getItem<T = boolean[]>(key: string, schema: JSONSchemaArrayOf<JSONSchemaBoolean>): Observable<boolean[] | null>;\n  getItem<T = any>(key: string, schema: JSONSchema | { schema: JSONSchema }): Observable<T | null>;\n  getItem<T = unknown>(key: string, schema?: JSONSchema): Observable<unknown>;\n  getItem<T = any>(key: string, schema?: JSONSchema | { schema: JSONSchema } | undefined) {\n\n    if (schema) {\n\n      /* Backward compatibility with version <= 7 */\n      const schemaFinal: JSONSchema = ('schema' in schema) ? schema.schema : schema;\n\n      return this.storageMap.get<T>(key, schemaFinal).pipe(\n        /* Transform `undefined` into `null` to align with `localStorage` API */\n        map((value) => (value !== undefined) ? value : null),\n      );\n\n    } else {\n\n      return this.storageMap.get(key).pipe(\n        /* Transform `undefined` into `null` to align with `localStorage` API */\n        map((value) => (value !== undefined) ? value : null),\n      );\n\n    }\n\n  }\n\n  /**\n   * Set an item in storage.\n   * Note that setting `null` or `undefined` will remove the item to avoid some browsers issues.\n   * @param key The item's key\n   * @param data The item's value\n   * @param schema Optional JSON schema to validate the data\n   * @returns A RxJS `Observable` to wait the end of the operation\n   *\n   * @example\n   * this.localStorage.set('key', 'value').subscribe(() => {});\n   */\n  setItem(key: string, data: any, schema?: JSONSchema): Observable<boolean> {\n\n    return this.storageMap.set(key, data, schema).pipe(\n      /* Transform `undefined` into `true` for backward compatibility with v7 */\n      mapTo(true),\n    );\n\n  }\n\n  /**\n   * Delete an item in storage\n   * @param key The item's key\n   * @returns A RxJS `Observable` to wait the end of the operation\n   *\n   * @example\n   * this.localStorage.delete('key').subscribe(() => {});\n   */\n  removeItem(key: string): Observable<boolean> {\n\n    return this.storageMap.delete(key).pipe(\n      /* Transform `undefined` into `true` for backward compatibility with v7 */\n      mapTo(true),\n    );\n\n  }\n\n  /**\n   * Delete all items in storage\n   * @returns A RxJS `Observable` to wait the end of the operation\n   *\n   * @example\n   * this.localStorage.clear().subscribe(() => {});\n   */\n  clear(): Observable<boolean> {\n\n    return this.storageMap.clear().pipe(\n      /* Transform `undefined` into `true` for backward compatibility with v7 */\n      mapTo(true),\n    );\n\n  }\n\n  /**\n   * Get all keys stored in storage\n   * @returns A list of the keys wrapped in a RxJS `Observable`\n   * @deprecated Moved to `StorageMap` service. Will be removed in v9.\n   * Note that while this method was giving you all keys at once in an array,\n   * the new `keys()` method in `StorageMap` service will *iterate* on each key.\n   */\n  keys(): Observable<string[]> {\n\n    return this.storageMap.keys().pipe(\n      /* Backward compatibility with v7: transform iterating `Observable` to a single array value */\n      toArray(),\n    );\n\n  }\n\n  /**\n   * Tells if a key exists in storage\n   * @returns A RxJS `Observable` telling if the key exists\n   * @deprecated Moved to `StorageMap` service. Will be removed in v9.\n   */\n  has(key: string): Observable<boolean> {\n\n    return this.storageMap.has(key);\n\n  }\n\n  /**\n   * Set an item in storage, and auto-subscribe\n   * @param key The item's key\n   * @param data The item's value\n   * **WARNING: should be avoided in most cases, use this method only if these conditions are fulfilled:**\n   * - you don't need to manage the error callback (errors will silently fail),\n   * - you don't need to wait the operation to finish before the next one (remember, it's asynchronous).\n   * @deprecated Promoted bad practices. Will be removed in v9.\n   */\n  setItemSubscribe(key: string, data: string | number | boolean | object): void {\n\n    this.setItem(key, data).subscribe({\n      next: () => {},\n      error: () => {},\n    });\n\n  }\n\n  /**\n   * Delete an item in storage, and auto-subscribe\n   * @param key The item's key\n   * **WARNING: should be avoided in most cases, use this method only if these conditions are fulfilled:**\n   * - you don't need to manage the error callback (errors will silently fail),\n   * - you don't need to wait the operation to finish before the next one (remember, it's asynchronous).\n   * @deprecated Promoted bad practices. Will be removed in v9.\n   */\n   removeItemSubscribe(key: string): void {\n\n    this.removeItem(key).subscribe({\n      next: () => {},\n      error: () => {},\n    });\n\n  }\n\n  /**\n   * Delete all items in storage, and auto-subscribe\n   * **WARNING: should be avoided in most cases, use this method only if these conditions are fulfilled:**\n   * - you don't need to manage the error callback (errors will silently fail),\n   * - you don't need to wait the operation to finish before the next one (remember, it's asynchronous).\n   * @deprecated Promoted bad practices. Will be removed in v9.\n   */\n  clearSubscribe(): void {\n\n    this.clear().subscribe({\n      next: () => {},\n      error: () => {},\n    });\n\n  }\n\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { LS_PREFIX, IDB_DB_NAME, IDB_STORE_NAME, IDB_DB_VERSION, IDB_NO_WRAP, StorageConfig } from './tokens';\n\n/**\n * This module does not contain anything, it's only useful to provide options via `.forRoot()`.\n */\n@NgModule()\nexport class StorageModule {\n\n  /**\n   * Only useful to provide options, otherwise it does nothing.\n   * **Must be used at initialization, ie. in `AppModule`, and must not be loaded again in another module.**\n   *\n   * @example\n   * NgModule({\n   *   imports: [StorageModule.forRoot({\n   *     IDBNoWrap: true,\n   *   })]\n   * })\n   * export class AppModule\n   */\n  static forRoot(config: StorageConfig): ModuleWithProviders {\n    return {\n      ngModule: StorageModule,\n      providers: [\n        config.LSPrefix ? { provide: LS_PREFIX, useValue: config.LSPrefix } : [],\n        config.IDBDBName ? { provide: IDB_DB_NAME, useValue: config.IDBDBName } : [],\n        config.IDBStoreName ? { provide: IDB_STORE_NAME, useValue: config.IDBStoreName } : [],\n        config.IDBDBVersion ? { provide: IDB_DB_VERSION, useValue: config.IDBDBVersion } : [],\n        config.IDBNoWrap ? { provide: IDB_NO_WRAP, useValue: config.IDBNoWrap } : [],\n      ],\n    };\n  }\n\n}\n"]}