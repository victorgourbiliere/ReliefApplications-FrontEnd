{"version":3,"file":"ngx-pwa-local-storage.umd.js","sources":["../../../../node_modules/tslib/tslib.es6.js","ng://@ngx-pwa/local-storage/lib/databases/exceptions.ts","ng://@ngx-pwa/local-storage/lib/tokens.ts","ng://@ngx-pwa/local-storage/lib/databases/indexeddb-database.ts","ng://@ngx-pwa/local-storage/lib/databases/localstorage-database.ts","ng://@ngx-pwa/local-storage/lib/databases/memory-database.ts","ng://@ngx-pwa/local-storage/lib/databases/local-database.ts","ng://@ngx-pwa/local-storage/lib/storages/exceptions.ts","ng://@ngx-pwa/local-storage/lib/validation/json-validator.ts","ng://@ngx-pwa/local-storage/lib/storages/storage-map.service.ts","ng://@ngx-pwa/local-storage/lib/storages/local-storage.service.ts","ng://@ngx-pwa/local-storage/lib/storage.module.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * Exception message when `indexedDB` is not working\n */\nexport const IDB_BROKEN_ERROR = 'indexedDB is not working';\n\n/**\n * Exception raised when `indexedDB` is not working\n */\nexport class IDBBrokenError extends Error {\n  message = IDB_BROKEN_ERROR;\n}\n\n/**\n * Exception message when a value can't be serialized for `localStorage`\n */\nexport const SERIALIZATION_ERROR = `The storage is currently localStorage,\nwhere data must be serialized, and the provided data can't be serialized.`;\n\n/**\n * Exception raised when a value can't be serialized for `localStorage`\n */\nexport class SerializationError extends Error {\n  message = SERIALIZATION_ERROR;\n}\n","import { InjectionToken, Provider } from '@angular/core';\n\n/**\n * Token to provide a prefix to avoid collision when multiple apps on the same *sub*domain.\n * @deprecated **Will be removed in v9**. Set options with `StorageModule.forRoot()` instead:\n *\n * Before v8:\n * ```ts\n * import { localStorageProviders, LOCAL_STORAGE_PREFIX } from '@ngx-pwa/local-storage';\n *\n * @NgModule({\n *   providers: [\n *     { provide: LOCAL_STORAGE_PREFIX, useValue: 'myapp' },\n *   ]\n * })\n * export class AppModule {}\n * ```\n *\n * Since v8:\n * ```ts\n * import { StorageModule } from '@ngx-pwa/local-storage';\n *\n * @NgModule({\n *   imports: [\n *     StorageModule.forRoot({\n *       LSPrefix: 'myapp_', // Note the underscore\n *       IDBDBName: 'myapp_ngStorage',\n *     }),\n *   ]\n * })\n * export class AppModule {}\n * ```\n *\n * **Be very careful while changing this in applications already deployed in production,**\n * **as an error would mean the loss of all previously stored data.**\n * **SO PLEASE TEST BEFORE PUSHING IN PRODUCTION.**\n *\n */\nexport const LOCAL_STORAGE_PREFIX = new InjectionToken<string>('localStoragePrefix', {\n  providedIn: 'root',\n  factory: () => ''\n});\n\n/**\n * Token to provide a prefix to `localStorage` keys.\n */\nexport const LS_PREFIX = new InjectionToken<string>('localStoragePrefix', {\n  providedIn: 'root',\n  factory: () => ''\n});\n\n/**\n * Default name used for `indexedDB` database.\n */\nexport const DEFAULT_IDB_DB_NAME = 'ngStorage';\n\n/**\n * Token to provide `indexedDB` database name.\n */\nexport const IDB_DB_NAME = new InjectionToken<string>('localStorageIDBDBName', {\n  providedIn: 'root',\n  factory: () => DEFAULT_IDB_DB_NAME\n});\n\n/**\n * Default version used for `indexedDB` database.\n */\nexport const DEFAULT_IDB_DB_VERSION = 1;\n\n/**\n * Token to provide `indexedDB` database version.\n * Must be an unsigned **integer**.\n */\nexport const IDB_DB_VERSION = new InjectionToken<number>('localStorageIDBDBVersion', {\n  providedIn: 'root',\n  factory: () => DEFAULT_IDB_DB_VERSION\n});\n\n/**\n * Default name used for `indexedDB` object store.\n */\nexport const DEFAULT_IDB_STORE_NAME = 'localStorage';\n\n/**\n * Token to provide `indexedDB` store name.\n * For backward compatibility, the default can't be set now, `IndexedDBDatabase` will do it at runtime.\n */\nexport const IDB_STORE_NAME = new InjectionToken<string>('localStorageIDBStoreName', {\n  providedIn: 'root',\n  factory: () => DEFAULT_IDB_STORE_NAME\n});\n\n/**\n * Default value for interoperability with native `indexedDB` and other storage libs,\n * by changing how values are stored in `indexedDB` database.\n * Currently defaults to `false` for backward compatiblity in existing applications\n * (**DO NOT CHANGE IT IN PRODUCTION**, as it would break with existing data),\n * but **should be `false` in all new applications, as it may become the default in a future version**.\n */\nexport const DEFAULT_IDB_NO_WRAP = false;\n\n/**\n * Token to allow interoperability with native `indexedDB` and other storage libs,\n * by changing how values are stored in `indexedDB` database.\n * Currently defaults to `false` for backward compatiblity in existing applications\n * (**DO NOT CHANGE IT IN PRODUCTION**, as it would break with existing data),\n * but **should be `true` in all new applications, as it may become the default in a future version**.\n */\nexport const IDB_NO_WRAP = new InjectionToken<boolean>('localStorageIDBWrap', {\n  providedIn: 'root',\n  factory: () => DEFAULT_IDB_NO_WRAP\n});\n\nexport interface StorageConfig {\n\n  /**\n   * Allows to add a prefix before `localStorage` keys.\n   * *Use only* for interoperability with other APIs or to avoid collision for multiple apps on the same subdomain.\n   * **WARNING: do not change this option in an app already deployed in production, as previously stored data would be lost.**\n   */\n  LSPrefix?: string;\n\n  /**\n   * Allows to change the name used for `indexedDB` database.\n   * *Use only* for interoperability with other APIs or to avoid collision for multiple apps on the same subdomain.\n   * **WARNING: do not change this option in an app already deployed in production, as previously stored data would be lost.**\n   */\n  IDBDBName?: string;\n\n  /**\n   * Allows to change the name used for `indexedDB` object store.\n   * *Use only* for interoperability with other APIs.\n   * **WARNING: do not change this option in an app already deployed in production, as previously stored data would be lost.**\n   */\n  IDBStoreName?: string;\n\n  /**\n   * Allows to change the database version used for `indexedDB` database.\n   * Must be an unsigned **integer**.\n   * **Use with caution as the creation of the store depends on the version.**\n   * *Use only* for interoperability with other APIs or to avoid collision for multiple apps on the same subdomain.\n   * **WARNING: do not change this option in an app already deployed in production, as previously stored data would be lost.**\n   */\n  IDBDBVersion?: number;\n\n  /**\n   * Allows interoperability with native `indexedDB` and other storage libs,\n   * by changing how values are stored in `indexedDB` database.\n   * Currently defaults to `false` for backward compatiblity in existing applications,\n   * **DO NOT CHANGE IT IN PRODUCTION**, as it would break with existing data.\n   * but **should be `true` in all new applications, as it may become the default in a future version**.\n   */\n  IDBNoWrap?: boolean;\n\n}\n\n/**\n * @deprecated in favor of `StorageConfig`. Will be removed in v9.\n */\nexport interface LocalStorageProvidersConfig {\n\n  /**\n   * Prefix to avoid collision when there are *multiple apps on the same subdomain*.\n   * **WARNING: do not change this option in an app already deployed in production, as previously stored data would be lost.**\n   * @deprecated Use `LSPrefix` and `IDBDBName` options instead. Will be removed in v9.\n   */\n  prefix?: string;\n\n}\n\n/**\n * Helper function to provide options. **Must be used at initialization, ie. in `AppModule`.**\n * @param config Options.\n * @returns A list of providers for the lib options.\n * @deprecated **Will be removed in v9.** Set options via `StorageModule.forRoot()` instead:\n *\n * Before v8:\n * ```ts\n * import { localStorageProviders, LOCAL_STORAGE_PREFIX } from '@ngx-pwa/local-storage';\n *\n * @NgModule({\n *   providers: [\n *     localStorageProviders({ prefix: 'myapp' }),\n *   ]\n * })\n * export class AppModule {}\n * ```\n *\n * Since v8:\n * ```ts\n * import { StorageModule } from '@ngx-pwa/local-storage';\n *\n * @NgModule({\n *   imports: [\n *     StorageModule.forRoot({\n *       LSPrefix: 'myapp_', // Note the underscore\n *       IDBDBName: 'myapp_ngStorage',\n *     }),\n *   ]\n * })\n * export class AppModule {}\n * ```\n *\n * **Be very careful while changing this in applications already deployed in production,**\n * **as an error would mean the loss of all previously stored data.**\n * **SO PLEASE TEST BEFORE PUSHING IN PRODUCTION.**\n *\n */\n// tslint:disable-next-line: deprecation\nexport function localStorageProviders(config: LocalStorageProvidersConfig): Provider[] {\n\n  return [\n    // tslint:disable-next-line: deprecation\n    config.prefix ? { provide: LOCAL_STORAGE_PREFIX, useValue: config.prefix } : [],\n  ];\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { Observable, ReplaySubject, fromEvent, of, throwError, race } from 'rxjs';\nimport { map, mergeMap, first, takeWhile, tap } from 'rxjs/operators';\n\nimport { LocalDatabase } from './local-database';\nimport { IDBBrokenError } from './exceptions';\nimport {\n  IDB_DB_NAME, IDB_STORE_NAME, DEFAULT_IDB_STORE_NAME, IDB_DB_VERSION, LOCAL_STORAGE_PREFIX,\n  DEFAULT_IDB_DB_NAME, DEFAULT_IDB_DB_VERSION, IDB_NO_WRAP, DEFAULT_IDB_NO_WRAP\n} from '../tokens';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class IndexedDBDatabase implements LocalDatabase {\n\n  /**\n   * `indexedDB` database name\n   */\n  protected readonly dbName: string;\n\n  /**\n   * `indexedDB` object store name\n   */\n  protected readonly storeName: string;\n\n  /**\n   * `indexedDB` database version. Must be an unsigned **integer**\n   */\n  protected readonly dbVersion: number;\n\n  /**\n   * `indexedDB` database connection, wrapped in a RxJS `ReplaySubject` to be able to access the connection\n   * even after the connection success event happened\n   */\n  protected readonly database = new ReplaySubject<IDBDatabase>(1);\n\n  /**\n   * Flag to not wrap `indexedDB` values for interoperability or to wrap for backward compatibility.\n   */\n  protected readonly noWrap: boolean;\n\n  /**\n   * Index used when wrapping value. *For backward compatibility only.*\n   */\n  protected readonly wrapIndex = 'value';\n\n  /**\n   * Constructor params are provided by Angular (but can also be passed manually in tests)\n   * @param dbName `indexedDB` database name\n   * @param storeName `indexedDB` store name\n   * @param dbVersion `indexedDB` database version\n   * @param noWrap `indexedDB` database version\n   * @param oldPrefix Pre-v8 backward compatible prefix\n   */\n  constructor(\n    @Inject(IDB_DB_NAME) dbName = DEFAULT_IDB_DB_NAME,\n    @Inject(IDB_STORE_NAME) storeName = DEFAULT_IDB_STORE_NAME,\n    @Inject(IDB_DB_VERSION) dbVersion = DEFAULT_IDB_DB_VERSION,\n    @Inject(IDB_NO_WRAP) noWrap = DEFAULT_IDB_NO_WRAP,\n    // tslint:disable-next-line: deprecation\n    @Inject(LOCAL_STORAGE_PREFIX) oldPrefix = '',\n  ) {\n\n    /* Initialize `indexedDB` database name, with prefix if provided by the user */\n    this.dbName = oldPrefix ? `${oldPrefix}_${dbName}` : dbName;\n\n    this.storeName = storeName;\n    this.dbVersion = dbVersion;\n    this.noWrap = noWrap;\n\n    /* Connect to `indexedDB`, with prefix if provided by the user */\n    this.connect();\n\n  }\n\n  /**\n   * Information about `indexedDB` connection. *Only useful for interoperability.*\n   * @returns `indexedDB` database name, store name and database version\n   */\n  get backingStore(): { database: string, store: string, version: number } {\n\n    return {\n      database: this.dbName,\n      store: this.storeName,\n      version: this.dbVersion,\n    };\n\n  }\n\n  /**\n   * Number of items in our `indexedDB` database and object store\n   */\n  get size(): Observable<number> {\n\n    /* Open a transaction in read-only mode */\n    return this.transaction('readonly').pipe(\n      mergeMap((store) => {\n\n        /* Request to know the number of items */\n        const request = store.count();\n\n        /* Manage success and error events, and get the result */\n        return this.requestEventsAndMapTo(request, () => request.result);\n\n      }),\n      /* The observable will complete after the first value */\n      first(),\n    );\n\n  }\n\n  /**\n   * Gets an item value in our `indexedDB` store\n   * @param key The item's key\n   * @returns The item's value if the key exists, `undefined` otherwise, wrapped in an RxJS `Observable`\n   */\n  get<T = any>(key: string): Observable<TÂ | undefined> {\n\n    /* Open a transaction in read-only mode */\n    return this.transaction('readonly').pipe(\n      mergeMap((store) => {\n\n        /* Request the value with the key provided by the user */\n        const request = store.get(key);\n\n        /* Manage success and error events, and get the result */\n        return this.requestEventsAndMapTo(request, () => {\n\n          if ((request.result !== undefined) && (request.result !== null)) {\n\n            /* Prior to v8, the value was wrapped in an `{ value: ...}` object */\n            if (!this.noWrap && (typeof request.result === 'object') && (this.wrapIndex in request.result) &&\n            (request.result[this.wrapIndex] !== undefined) && (request.result[this.wrapIndex] !== null)) {\n\n              return (request.result[this.wrapIndex] as T);\n\n            } else {\n\n              /* Cast to the wanted type */\n              return request.result as T;\n\n            }\n\n          }\n\n          /* Return `undefined` if the value is empty */\n          return undefined;\n\n        });\n\n      }),\n      /* The observable will complete after the first value */\n      first(),\n    );\n\n  }\n\n  /**\n   * Sets an item in our `indexedDB` store\n   * @param key The item's key\n   * @param data The item's value\n   * @returns An RxJS `Observable` to wait the end of the operation\n   */\n  set(key: string, data: any): Observable<undefined> {\n\n    /* Storing `undefined` in `indexedDb` can cause issues in some browsers so removing item instead */\n    if (data === undefined) {\n      return this.delete(key);\n    }\n\n    /* Open a transaction in write mode */\n    return this.transaction('readwrite').pipe(\n      mergeMap((store) => {\n\n        /* Check if the key already exists or not\n         * `getKey()` is better but only available in `indexedDB` v2 (Chrome >= 58, missing in IE/Edge).\n         * In older browsers, the value is checked instead, but it could lead to an exception\n         * if `undefined` was stored outside of this lib (e.g. directly with the native `indexedDB` API).\n         */\n        const requestGet = this.getKeyRequest(store, key);\n\n        /* Manage success and error events, and get the request result */\n        return this.requestEventsAndMapTo(requestGet, () => requestGet.result).pipe(\n          mergeMap((existingEntry) => {\n\n            /* It is very important the second request is done from the same transaction/store as the previous one,\n             * otherwise it could lead to concurrency failures\n             * Avoid https://github.com/cyrilletuzi/angular-async-local-storage/issues/47 */\n\n            /* Prior to v8, data was wrapped in a `{ value: ... }` object */\n            const dataToStore = this.noWrap ? data : { [this.wrapIndex]: data };\n\n            /* Add if the item is not existing yet, or update otherwise */\n            const requestSet = (existingEntry === undefined) ?\n              store.add(dataToStore, key) :\n              store.put(dataToStore, key);\n\n            /* Manage success and error events, and map to `true` */\n            return this.requestEventsAndMapTo(requestSet, () => undefined);\n\n          }),\n        );\n      }),\n      /* The observable will complete after the first value */\n      first(),\n    );\n\n  }\n\n  /**\n   * Deletes an item in our `indexedDB` store\n   * @param key The item's key\n   * @returns An RxJS `Observable` to wait the end of the operation\n   */\n  delete(key: string): Observable<undefined> {\n\n    /* Open a transaction in write mode */\n    return this.transaction('readwrite').pipe(\n      mergeMap((store) => {\n\n        /* Deletethe item in store */\n        const request = store.delete(key);\n\n        /* Manage success and error events, and map to `true` */\n        return this.requestEventsAndMapTo(request, () => undefined);\n\n      }),\n      /* The observable will complete after the first value */\n      first(),\n    );\n\n  }\n\n  /**\n   * Deletes all items from our `indexedDB` objet store\n   * @returns An RxJS `Observable` to wait the end of the operation\n   */\n  clear(): Observable<undefined> {\n\n    /* Open a transaction in write mode */\n    return this.transaction('readwrite').pipe(\n      mergeMap((store) => {\n\n        /* Delete all items in object store */\n        const request = store.clear();\n\n        /* Manage success and error events, and map to `true` */\n        return this.requestEventsAndMapTo(request, () => undefined);\n\n      }),\n      /* The observable will complete */\n      first(),\n    );\n\n  }\n\n  /**\n   * Get all the keys in our `indexedDB` store\n   * @returns An RxJS `Observable` iterating on each key\n   */\n  keys(): Observable<string> {\n\n    /* Open a transaction in read-only mode */\n    return this.transaction('readonly').pipe(\n      /* `first()` is used as the final operator in other methods to complete the `Observable`\n       * (as it all starts from a `ReplaySubject` which never ends),\n       * but as this method is iterating over multiple values, `first()` **must** be used here */\n      first(),\n      mergeMap((store) => {\n\n        /* Open a cursor on the store\n         * `.openKeyCursor()` is better for performance, but only available in indexedDB v2 (missing in IE/Edge)\n         * Avoid issues like https://github.com/cyrilletuzi/angular-async-local-storage/issues/69 */\n        const request = ('openKeyCursor' in store) ? store.openKeyCursor() : (store as IDBObjectStore).openCursor();\n\n        /* Listen to success event */\n        const success$ = this.successEvent(request).pipe(\n          /* Stop the `Observable` when the cursor is `null` */\n          takeWhile(() => (request.result !== null)),\n          /* This lib only allows string keys, but user could have added other types of keys from outside\n           * It's OK to cast as the cursor as been tested in the previous operator */\n          map(() => (request.result as IDBCursor).key.toString()),\n          /* Iterate on the cursor */\n          tap(() => { (request.result as IDBCursor).continue(); }),\n        );\n\n        /* Listen to error event and if so, throw an error */\n        const error$ = this.errorEvent(request);\n\n        /* Choose the first event to occur */\n        return race([success$, error$]);\n\n      }),\n    );\n\n  }\n\n  /**\n   * Check if a key exists in our `indexedDB` store\n   * @returns An RxJS `Observable` telling if the key exists or not\n   */\n  has(key: string): Observable<boolean> {\n\n    /* Open a transaction in read-only mode */\n    return this.transaction('readonly').pipe(\n      mergeMap((store) => {\n\n        /* Check if the key exists in the store */\n        const request = this.getKeyRequest(store, key);\n\n        /* Manage success and error events, and map to a boolean based on the existence of the key */\n        return this.requestEventsAndMapTo(request, () => (request.result !== undefined) ? true : false);\n\n      }),\n      /* The observable will complete */\n      first()\n    );\n\n  }\n\n  /**\n   * Connects to `indexedDB` and creates the object store on first time\n   */\n  protected connect(): void {\n\n    let request: IDBOpenDBRequest;\n\n    /* Connect to `indexedDB`\n     * Will fail in Safari cross-origin iframes\n     * @see {@link https://github.com/cyrilletuzi/angular-async-local-storage/issues/42} */\n    try {\n\n      /* Do NOT explicit `window` here, as `indexedDB` could be used from a web worker too */\n      request = indexedDB.open(this.dbName, this.dbVersion);\n\n    }Â catch {\n\n      this.database.error(new IDBBrokenError());\n\n      return;\n\n    }\n\n    /* Create store on first connection */\n    this.createStore(request);\n\n    /* Listen to success and error events and choose the first to occur */\n    race([this.successEvent(request), this.errorEvent(request)])\n      /* The observable will complete */\n      .pipe(first())\n      .subscribe({\n        next: () => {\n          /* Register the database connection in the `ReplaySubject` for further access */\n          this.database.next(request.result);\n        },\n        error: () => {\n          /* Firefox private mode issue: fallback storage if IndexedDb connection is failing\n          * @see {@link https://bugzilla.mozilla.org/show_bug.cgi?id=781982}\n          * @see {@link https://github.com/cyrilletuzi/angular-async-local-storage/issues/26} */\n          this.database.error(new IDBBrokenError());\n        },\n      });\n\n  }\n\n  /**\n   * Create store on first use of `indexedDB`\n   * @param request `indexedDB` database opening request\n   */\n  protected createStore(request: IDBOpenDBRequest): void {\n\n    /* Listen to the event fired on first connection */\n    fromEvent(request, 'upgradeneeded')\n      /* The observable will complete */\n      .pipe(first())\n      .subscribe({\n        next: () => {\n\n          /* Check if the store already exists, to avoid error */\n          if (!request.result.objectStoreNames.contains(this.storeName)) {\n\n            /* Create the object store */\n            request.result.createObjectStore(this.storeName);\n\n          }\n\n        }\n      });\n\n  }\n\n  /**\n   * Open an `indexedDB` transaction and get our store\n   * @param mode `readonly` or `readwrite`\n   * @returns An `indexedDB` store, wrapped in an RxJS `Observable`\n   */\n  protected transaction(mode: IDBTransactionMode): Observable<IDBObjectStore> {\n\n    /* From the `indexedDB` connection, open a transaction and get the store */\n    return this.database\n      .pipe(mergeMap((database) => {\n\n        let store: IDBObjectStore;\n\n        try {\n\n          store = database.transaction([this.storeName], mode).objectStore(this.storeName);\n\n        } catch (error) {\n\n            /* The store could have been deleted from outside */\n            return throwError(error as DOMException);\n\n        }\n\n        return of(store);\n\n      }));\n\n  }\n\n  /**\n   * Listen to an `indexedDB` success error event\n   * @param request Request to listen\n   * @returns An RxJS `Observable` listening to the success event\n   */\n  protected successEvent(request: IDBRequest): Observable<Event> {\n\n    return fromEvent(request, 'success');\n\n  }\n\n  /**\n   * Listen to an `indexedDB` request error event\n   * @param request Request to listen\n   * @returns An RxJS `Observable` listening to the error event and if so, throwing an error\n   */\n  protected errorEvent(request: IDBRequest): Observable<never> {\n\n    return fromEvent(request, 'error').pipe(mergeMap(() => throwError(request.error as DOMException)));\n\n  }\n\n  /**\n   * Listen to an `indexedDB` request success and error event, and map to the wanted value\n   * @param request Request to listen\n   * @param mapCallback Callback returning the wanted value\n   * @returns An RxJS `Observable` listening to request events and mapping to the wanted value\n   */\n  protected requestEventsAndMapTo<T>(request: IDBRequest, mapCallback: () => T): Observable<T> {\n\n    /* Listen to the success event and map to the wanted value\n     * `mapTo()` must not be used here as it would eval `request.result` too soon */\n    const success$ = this.successEvent(request).pipe(map(mapCallback));\n\n    /* Listen to the error event */\n    const error$ = this.errorEvent(request);\n\n    /* Choose the first event to occur */\n    return race([success$, error$]);\n\n  }\n\n  /**\n   * Check if the key exists in the store\n   * @param store Objet store on which to perform the request\n   * @param key Key to check\n   * @returns An `indexedDB` request\n   */\n  protected getKeyRequest(store: IDBObjectStore, key: string): IDBRequest {\n\n    /* `getKey()` is better but only available in `indexedDB` v2 (Chrome >= 58, missing in IE/Edge).\n     * In older browsers, the value is checked instead, but it could lead to an exception\n     * if `undefined` was stored outside of this lib (e.g. directly with the native `indexedDB` API).\n     * Fixes https://github.com/cyrilletuzi/angular-async-local-storage/issues/69\n     */\n    return ('getKey' in store) ? store.getKey(key) : (store as IDBObjectStore).get(key);\n\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { Observable, of, throwError, asyncScheduler } from 'rxjs';\nimport { observeOn } from 'rxjs/operators';\n\nimport { LocalDatabase } from './local-database';\nimport { SerializationError } from './exceptions';\nimport { LOCAL_STORAGE_PREFIX, LS_PREFIX } from '../tokens';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LocalStorageDatabase implements LocalDatabase {\n\n  /**\n   * Optional user prefix to avoid collision for multiple apps on the same subdomain\n   */\n  readonly prefix: string;\n\n  /**\n   * Constructor params are provided by Angular (but can also be passed manually in tests)\n   * @param prefix Prefix option to avoid collision for multiple apps on the same subdomain or for interoperability\n   * @param oldPrefix Prefix option prior to v8 to avoid collision for multiple apps on the same subdomain or for interoperability\n   */\n  constructor(\n    @Inject(LS_PREFIX) prefix = '',\n    // tslint:disable-next-line: deprecation\n    @Inject(LOCAL_STORAGE_PREFIX) oldPrefix = '',\n  ) {\n\n    /* Priority for the new prefix option, otherwise old prefix with separator, or no prefix */\n    this.prefix = prefix || (oldPrefix ? `${oldPrefix}_` : '');\n\n  }\n\n  /**\n   * Number of items in `localStorage`\n   */\n  get size(): Observable<number> {\n\n    /* Wrap in a RxJS `Observable` to be consistent with other storages */\n    return of(localStorage.length);\n\n  }\n\n  /**\n   * Gets an item value in `localStorage`\n   * @param key The item's key\n   * @returns The item's value if the key exists, `undefined` otherwise, wrapped in a RxJS `Observable`\n   */\n  get<T = any>(key: string): Observable<T | undefined> {\n\n    /* Get raw data */\n    const unparsedData = localStorage.getItem(this.prefixKey(key));\n\n    let parsedData: T | undefined;\n\n    /* No need to parse if data is `null` or `undefined` */\n    if ((unparsedData !== undefined) && (unparsedData !== null)) {\n\n      /* Try to parse */\n      try {\n        parsedData = JSON.parse(unparsedData) as T;\n      } catch (error) {\n        return throwError(error as SyntaxError);\n      }\n\n    }\n\n    /* Wrap in a RxJS `Observable` to be consistent with other storages */\n    return of(parsedData);\n\n  }\n\n  /**\n   * Store an item in `localStorage`\n   * @param key The item's key\n   * @param data The item's value\n   * @returns A RxJS `Observable` to wait the end of the operation\n   */\n  set(key: string, data: any): Observable<undefined> {\n\n    let serializedData: string | null = null;\n\n    /* Check if data can be serialized */\n    const dataPrototype = Object.getPrototypeOf(data);\n    if ((typeof data === 'object') && (data !== null) && !Array.isArray(data) &&\n    !((dataPrototype === Object.prototype) || (dataPrototype === null))) {\n      return throwError(new SerializationError());\n    }\n\n    /* Try to stringify (can fail on circular references) */\n    try {\n      serializedData = JSON.stringify(data);\n    } catch (error) {\n      return throwError(error as TypeError);\n    }\n\n    /* Can fail if storage quota is exceeded */\n    try {\n      localStorage.setItem(this.prefixKey(key), serializedData);\n    } catch (error) {\n      return throwError(error as DOMException);\n    }\n\n    /* Wrap in a RxJS `Observable` to be consistent with other storages */\n    return of(undefined);\n\n  }\n\n  /**\n   * Deletes an item in `localStorage`\n   * @param key The item's key\n   * @returns A RxJS `Observable` to wait the end of the operation\n   */\n  delete(key: string): Observable<undefined> {\n\n    localStorage.removeItem(this.prefixKey(key));\n\n    /* Wrap in a RxJS `Observable` to be consistent with other storages */\n    return of(undefined);\n\n  }\n\n  /**\n   * Deletes all items in `localStorage`\n   * @returns A RxJS `Observable` to wait the end of the operation\n   */\n  clear(): Observable<undefined> {\n\n    localStorage.clear();\n\n    /* Wrap in a RxJS `Observable` to be consistent with other storages */\n    return of(undefined);\n\n  }\n\n  /**\n   * Get all keys in `localStorage`\n   * Note the order of the keys may be inconsistent in Firefox\n   * @returns A RxJS `Observable` iterating on keys\n   */\n  keys(): Observable<string> {\n\n    /* Create an `Observable` from keys */\n    return new Observable<string>((subscriber) => {\n\n      /* Iteretate over all the indexes */\n      for (let index = 0; index < localStorage.length; index += 1) {\n\n        /* Cast as we are sure in this case the key is not `null` */\n        subscriber.next(this.getUnprefixedKey(index) as string);\n\n      }\n\n      subscriber.complete();\n\n    }).pipe(\n      /* Required to work like other databases which are asynchronous */\n      observeOn(asyncScheduler),\n    );\n\n  }\n\n  /**\n   * Check if a key exists in `localStorage`\n   * @param key The item's key\n   * @returns A RxJS `Observable` telling if the key exists or not\n   */\n  has(key: string): Observable<boolean> {\n\n    /* ItÃ©rate over all indexes in storage */\n    for (let index = 0; index < localStorage.length; index += 1) {\n\n      if (key === this.getUnprefixedKey(index))Â {\n\n        /* Wrap in a RxJS `Observable` to be consistent with other storages */\n        return of(true);\n\n      }\n\n    }\n\n    /* Wrap in a RxJS `Observable` to be consistent with other storages */\n    return of(false);\n\n  }\n\n  /**\n   * Get an unprefixed key\n   * @param index Index of the key\n   * @returns The unprefixed key name if exists, `null` otherwise\n   */\n  protected getUnprefixedKey(index: number): string | null {\n\n    /* Get the key in storage: may have a prefix */\n    const prefixedKey = localStorage.key(index);\n\n    if (prefixedKey !== null) {\n\n      /* If no prefix, the key is already good, otherwrite strip the prefix */\n      return !this.prefix ? prefixedKey : prefixedKey.substr(this.prefix.length);\n\n    }\n\n    return null;\n\n  }\n\n  /**\n   * Add the prefix to a key\n   * @param key The key name\n   * @returns The prefixed key name\n   */\n  protected prefixKey(key: string): string {\n\n    return `${this.prefix}${key}`;\n\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of, from } from 'rxjs';\n\nimport { LocalDatabase } from './local-database';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MemoryDatabase implements LocalDatabase {\n\n  /**\n   * Memory storage\n   */\n  protected memoryStorage = new Map<string, any>();\n\n  /**\n   * Number of items in memory\n   */\n  get size(): Observable<number> {\n\n    /* Wrap in a RxJS `Observable` to be consistent with other storages */\n    return of(this.memoryStorage.size);\n\n  }\n\n  /**\n   * Gets an item value in memory\n   * @param key The item's key\n   * @returns The item's value if the key exists, `undefined` otherwise, wrapped in a RxJS `Observable`\n   */\n   get<T = any>(key: string): Observable<T | undefined> {\n\n    const rawData = this.memoryStorage.get(key) as T | undefined;\n\n    /* Wrap in a RxJS `Observable` to be consistent with other storages */\n    return of(rawData);\n\n  }\n\n  /**\n   * Sets an item in memory\n   * @param key The item's key\n   * @param data The item's value\n   * @returns A RxJS `Observable` to wait the end of the operation\n   */\n   set(key: string, data: any): Observable<undefined> {\n\n    this.memoryStorage.set(key, data);\n\n    /* Wrap in a RxJS `Observable` to be consistent with other storages */\n    return of(undefined);\n\n  }\n\n  /**\n   * Deletes an item in memory\n   * @param key The item's key\n   * @returns A RxJS `Observable` to wait the end of the operation\n   */\n   delete(key: string): Observable<undefined> {\n\n    this.memoryStorage.delete(key);\n\n    /* Wrap in a RxJS `Observable` to be consistent with other storages */\n    return of(undefined);\n\n  }\n\n  /**\n   * Deletes all items in memory\n   * @returns A RxJS `Observable` to wait the end of the operation\n   */\n   clear(): Observable<undefined> {\n\n    this.memoryStorage.clear();\n\n    /* Wrap in a RxJS `Observable` to be consistent with other storages */\n    return of(undefined);\n\n  }\n\n  /**\n   * Get all keys in memory\n   * @returns A RxJS `Observable` iterating on keys\n   */\n  keys(): Observable<string> {\n\n    /* Create an `Observable` from keys */\n    return from(this.memoryStorage.keys());\n\n  }\n\n  /**\n   * Check if a key exists in memory\n   * @param key Key name\n   * @returns a RxJS `Observable` telling if the key exists or not\n   */\n  has(key: string): Observable<boolean> {\n\n    /* Wrap in a RxJS `Observable` to be consistent with other storages */\n    return of(this.memoryStorage.has(key));\n\n  }\n\n}\n","import { Injectable, PLATFORM_ID } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { Observable } from 'rxjs';\n\nimport { IndexedDBDatabase } from './indexeddb-database';\nimport { LocalStorageDatabase } from './localstorage-database';\nimport { MemoryDatabase } from './memory-database';\nimport { IDB_STORE_NAME, IDB_DB_NAME, LOCAL_STORAGE_PREFIX, LS_PREFIX, IDB_DB_VERSION, IDB_NO_WRAP } from '../tokens';\n\n/**\n * Factory to create a storage according to browser support\n * @param platformId Context about the platform (`browser`, `server`...)\n * @param LSPrefix Prefix for `localStorage` keys to avoid collision for multiple apps on the same subdomain\n * @param IDBDBName `indexedDB` database name\n * @param IDBstoreName `indexedDB` storeName name\n * @param oldPrefix Prefix option prior to v8 to avoid collision for multiple apps on the same subdomain\n * @see {@link https://github.com/cyrilletuzi/angular-async-local-storage/blob/master/docs/BROWSERS_SUPPORT.md}\n */\nexport function localDatabaseFactory(\n  platformId: string, LSPrefix: string, IDBDBName: string, IDBStoreName: string,\n  IDBDBVersion: number, IDBNoWrap: boolean, oldPrefix: string): LocalDatabase {\n\n  /* When storage is fully disabled in browser (via the \"Block all cookies\" option),\n   * just trying to check `indexedDB` or `localStorage` variables causes a security exception.\n   * Prevents https://github.com/cyrilletuzi/angular-async-local-storage/issues/118\n   */\n  try {\n\n    // Do not explicit `window` here, as the global object is not the same in web workers\n    if (isPlatformBrowser(platformId) && (indexedDB !== undefined) && (indexedDB !== null) && ('open' in indexedDB)) {\n\n      /* Check:\n      * - if we are in a browser context (issue: server-side rendering)\n      * - if `indexedDB` exists (issue: IE9)\n      * - it could exist but be `undefined` or `null` (issue: IE / Edge private mode)\n      * - it could exists but not having a working API\n      * Will be the case for:\n      * - IE10+ and all other browsers in normal mode\n      * - Chromium / Safari private mode, but in this case, data will be swiped when the user leaves the app */\n      return new IndexedDBDatabase(IDBDBName, IDBStoreName, IDBDBVersion, IDBNoWrap, oldPrefix);\n\n    } else if (isPlatformBrowser(platformId)\n    && (localStorage !== undefined) && (localStorage !== null) && ('getItem' in localStorage)) {\n\n      /* Check:\n      * - if we are in a browser context (issue: server-side rendering)\n      * - if `localStorage` exists (to be sure)\n      * - it could exists but not having a working API\n      * Will be the case for:\n      * - IE9\n      * - Safari cross-origin iframes, detected later in `IndexedDBDatabase.connect()`\n      * @see {@link https://github.com/cyrilletuzi/angular-async-local-storage/issues/42}\n      * - IE / Edge / Firefox private mode, but in this case, data will be swiped when the user leaves the app\n      * For Firefox, can only be detected later in `IndexedDBDatabase.connect()`\n      * @see {@link https://bugzilla.mozilla.org/show_bug.cgi?id=781982}\n      */\n      return new LocalStorageDatabase(LSPrefix, oldPrefix);\n\n    }\n\n  } catch {}\n\n  /* Will be the case for:\n   * - In browsers if storage has been fully disabled (via the \"Block all cookies\" option)\n   * - Server-side rendering\n   * - All other non-browser context\n   */\n  return new MemoryDatabase();\n\n}\n\n@Injectable({\n  providedIn: 'root',\n  useFactory: localDatabaseFactory,\n  deps: [\n    PLATFORM_ID,\n    LS_PREFIX,\n    IDB_DB_NAME,\n    IDB_STORE_NAME,\n    IDB_DB_VERSION,\n    IDB_NO_WRAP,\n    // tslint:disable-next-line: deprecation\n    LOCAL_STORAGE_PREFIX,\n  ]\n})\nexport abstract class LocalDatabase {\n\n  abstract readonly size: Observable<number>;\n\n  abstract get<T = any>(key: string): Observable<T | undefined>;\n  abstract set(key: string, data: any): Observable<undefined>;\n  abstract delete(key: string): Observable<undefined>;\n  abstract clear(): Observable<undefined>;\n  abstract keys(): Observable<string>;\n  abstract has(key: string): Observable<boolean>;\n\n}\n","/**\n * Exception message when a value is not valid against the JSON schema\n */\nexport const VALIDATION_ERROR = `Data stored is not valid against the provided JSON schema.\nCheck your JSON schema, otherwise it means data has been corrupted.`;\n\n/**\n * Exception raised when a value is not valid against the JSON schema\n */\nexport class ValidationError extends Error {\n  message = VALIDATION_ERROR;\n}\n","import { Injectable } from '@angular/core';\nimport {\n  JSONSchema, JSONSchemaString, JSONSchemaInteger, JSONSchemaNumber, JSONSchemaBoolean,\n  JSONSchemaArray, JSONSchemaObject\n} from './json-schema';\n\n// TODO: detailed error messages?\n@Injectable({\n  providedIn: 'root'\n})\nexport class JSONValidator {\n\n  /**\n   * Validate a JSON data against a Jsubset of the JSON Schema standard.\n   * Types are enforced to validate everything: each schema must\n   * @param data JSON data to validate\n   * @param schema Subset of JSON Schema. Must have a `type`.\n   * @returns If data is valid: `true`, if it is invalid: `false`\n   * @see {@link https://github.com/cyrilletuzi/angular-async-local-storage/blob/master/docs/VALIDATION.md}\n   */\n  validate(data: any, schema: JSONSchema): boolean {\n\n    switch (schema.type) {\n\n      case 'string':\n        return this.validateString(data, schema);\n      case 'number':\n      case 'integer':\n        return this.validateNumber(data, schema);\n      case 'boolean':\n        return this.validateBoolean(data, schema);\n      case 'array':\n        return this.validateArray(data, schema);\n      case 'object':\n        return this.validateObject(data, schema);\n\n    }\n\n  }\n\n  /**\n   * Validate a string\n   * @param data Data to validate\n   * @param schema Schema describing the string\n   * @returns If data is valid: `true`, if it is invalid: `false`\n   */\n  protected validateString(data: any, schema: JSONSchemaString): boolean {\n\n    if (typeof data !== 'string') {\n      return false;\n    }\n\n    if (!this.validateConst(data, schema)) {\n      return false;\n    }\n\n    if (!this.validateEnum(data, schema)) {\n      return false;\n    }\n\n    if ((schema.maxLength !== undefined) && (data.length > schema.maxLength)) {\n      return false;\n    }\n\n    if ((schema.minLength !== undefined) && (data.length < schema.minLength)) {\n      return false;\n    }\n\n    if (schema.pattern) {\n\n      let regularExpression: RegExp | null = null;\n\n      try {\n        regularExpression = new RegExp(schema.pattern);\n      } catch {}\n\n      if (regularExpression && !regularExpression.test(data)) {\n        return false;\n      }\n\n    }\n\n    return true;\n\n  }\n\n  /**\n   * Validate a number or an integer\n   * @param data Data to validate\n   * @param schema Schema describing the number or integer\n   * @returns If data is valid: `true`, if it is invalid: `false`\n   */\n  protected validateNumber(data: any, schema: JSONSchemaNumber |Â JSONSchemaInteger): boolean {\n\n    if (typeof data !== 'number') {\n      return false;\n    }\n\n    if ((schema.type === 'integer') && !Number.isInteger(data)) {\n      return false;\n    }\n\n    if (!this.validateConst(data, schema)) {\n      return false;\n    }\n\n    if (!this.validateEnum(data, schema)) {\n      return false;\n    }\n\n    /* Test is done this way to not divide by 0 */\n    if (schema.multipleOf && !Number.isInteger(data / schema.multipleOf)) {\n      return false;\n    }\n\n    if ((schema.maximum !== undefined) && (data > schema.maximum)) {\n        return false;\n    }\n\n    if ((schema.exclusiveMaximum !== undefined) && (data >= schema.exclusiveMaximum)) {\n      return false;\n\n    }\n\n    if ((schema.minimum !== undefined) && (data < schema.minimum)) {\n      return false;\n\n    }\n\n    if ((schema.exclusiveMinimum !== undefined) && (data <= schema.exclusiveMinimum)) {\n        return false;\n    }\n\n    return true;\n\n  }\n\n  /**\n   * Validate a boolean\n   * @param data Data to validate\n   * @param schema Schema describing the boolean\n   * @returns If data is valid: `true`, if it is invalid: `false`\n   */\n  protected validateBoolean(data: any, schema: JSONSchemaBoolean): boolean {\n\n    if (typeof data !== 'boolean') {\n      return false;\n    }\n\n    if (!this.validateConst(data, schema)) {\n      return false;\n    }\n\n    return true;\n\n  }\n\n  /**\n   * Validate an array\n   * @param data Data to validate\n   * @param schema Schema describing the array\n   * @returns If data is valid: `true`, if it is invalid: `false`\n   */\n  protected validateArray(data: any[], schema: JSONSchemaArray): boolean {\n\n    if (!Array.isArray(data)) {\n      return false;\n    }\n\n    if ((schema.maxItems !== undefined) && (data.length > schema.maxItems)) {\n      return false;\n    }\n\n    if ((schema.minItems !== undefined) && (data.length < schema.minItems)) {\n      return false;\n    }\n\n    if (schema.uniqueItems) {\n\n      /* Create a set to eliminate values with multiple occurences */\n      const dataSet = new Set(data);\n\n      if (data.length !== dataSet.size) {\n        return false;\n      }\n\n    }\n\n    /* Specific test for tuples */\n    if (Array.isArray(schema.items)) {\n\n      return this.validateTuple(data, schema.items);\n\n    }\n\n    /* Validate all the values in array */\n    for (const value of data) {\n\n      if (!this.validate(value, schema.items)) {\n        return false;\n      }\n\n    }\n\n    return true;\n\n  }\n\n  /**\n   * Validate a tuple (array with fixed length and multiple types)\n   * @param data Data to validate\n   * @param schemas Schemas describing the tuple\n   * @returns If data is valid: `true`, if it is invalid: `false`\n   */\n  protected validateTuple(data: any[], schemas: JSONSchema[]): boolean {\n\n    /* Tuples have a fixed length */\n    if (data.length !== schemas.length) {\n\n      return false;\n\n    }\n\n    for (let i = 0; i < schemas.length; i += 1) {\n\n      if (!this.validate(data[i], schemas[i])) {\n        return false;\n      }\n\n    }\n\n    return true;\n\n  }\n\n  /**\n   * Validate an object\n   * @param data Data to validate\n   * @param schema JSON schema describing the object\n   * @returns If data is valid: `true`, if it is invalid: `false`\n   */\n  protected validateObject(data: { [k: string]: any; }, schema: JSONSchemaObject): boolean {\n\n    /* Check the type and if not `null` as `null` also have the type `object` in old browsers */\n    if ((data === null) || (typeof data !== 'object')) {\n      return false;\n    }\n\n    /* Check if the object doesn't have more properties than expected\n     * Equivalent of `additionalProperties: false`\n     */\n    if (Object.keys(schema.properties).length < Object.keys(data).length) {\n      return false;\n    }\n\n    /* Validate required properties */\n    if (schema.required) {\n\n      for (const requiredProp of schema.required) {\n\n        if (!data.hasOwnProperty(requiredProp)) {\n          return false;\n        }\n\n      }\n\n    }\n\n    /* Recursively validate all properties */\n    for (const property in schema.properties) {\n\n      /* Filter to keep only real properties (no internal JS stuff) and check if the data has the property too */\n      if (schema.properties.hasOwnProperty(property) && data.hasOwnProperty(property)) {\n\n        if (!this.validate(data[property], schema.properties[property])) {\n          return false;\n        }\n\n      }\n\n    }\n\n    return true;\n\n  }\n\n  /**\n   * Validate a constant\n   * @param data Data ta validate\n   * @param schema JSON schema describing the constant\n   * @returns If data is valid: `true`, if it is invalid: `false`\n   */\n  protected validateConst(data: any, schema: JSONSchemaBoolean | JSONSchemaInteger | JSONSchemaNumber | JSONSchemaString): boolean {\n\n    if (!schema.const) {\n      return true;\n    }\n\n    return (data === schema.const);\n\n  }\n\n  /**\n   * Validate an enum\n   * @param data Data ta validate\n   * @param schema JSON schema describing the enum\n   * @returns If data is valid: `true`, if it is invalid: `false`\n   */\n  protected validateEnum(data: any, schema: JSONSchemaInteger | JSONSchemaNumber | JSONSchemaString): boolean {\n\n    if (!schema.enum) {\n      return true;\n    }\n\n    /* Cast as the data can be of multiple types, and so TypeScript is lost */\n    return ((schema.enum as any[]).includes(data));\n\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { Observable, throwError, of, OperatorFunction } from 'rxjs';\nimport { mergeMap, catchError } from 'rxjs/operators';\n\nimport { ValidationError } from './exceptions';\nimport {\n  JSONSchema, JSONSchemaBoolean, JSONSchemaInteger,\n  JSONSchemaNumber, JSONSchemaString, JSONSchemaArrayOf, JSONValidator\n} from '../validation';\nimport { LocalDatabase, IDB_BROKEN_ERROR, LocalStorageDatabase, IndexedDBDatabase, MemoryDatabase } from '../databases';\nimport { LS_PREFIX, LOCAL_STORAGE_PREFIX } from '../tokens';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StorageMap {\n\n  /**\n   * Constructor params are provided by Angular (but can also be passed manually in tests)\n   * @param database Storage to use\n   * @param jsonValidator Validator service\n   * @param LSPrefix Prefix for `localStorage` keys to avoid collision for multiple apps on the same subdomain or for interoperability\n   * @param oldPrefix Prefix option prior to v8 to avoid collision for multiple apps on the same subdomain or for interoperability\n   */\n  constructor(\n    protected database: LocalDatabase,\n    protected jsonValidator: JSONValidator = new JSONValidator(),\n    @Inject(LS_PREFIX) protected LSPrefix = '',\n    // tslint:disable-next-line: deprecation\n    @Inject(LOCAL_STORAGE_PREFIX) protected oldPrefix = '',\n  ) {}\n\n  /**\n   * **Number of items** in storage, wrapped in an `Observable`.\n   *\n   * @example\n   * this.storageMap.size.subscribe((size) => {\n   *   console.log(size);\n   * });\n   */\n  get size(): Observable<number> {\n\n    return this.database.size;\n\n  }\n\n  /**\n   * Tells you which storage engine is used. *Only useful for interoperability.*\n   * Note that due to some browsers issues in some special contexts\n   * (Firefox private mode and Safari cross-origin iframes),\n   * **this information may be wrong at initialization,**\n   * as the storage could fallback from `indexedDB` to `localStorage`\n   * only after a first read or write operation.\n   * @returns Storage engine used\n   *\n   * @see {@link https://github.com/cyrilletuzi/angular-async-local-storage/blob/master/docs/INTEROPERABILITY.md}\n   *\n   * @example\n   * if (this.storageMap.backingEngine === 'indexedDB') {}\n   */\n  get backingEngine(): 'indexedDB' | 'localStorage' |Â 'memory' | 'unknown' {\n\n    if (this.database instanceof IndexedDBDatabase) {\n\n      return 'indexedDB';\n\n    } else if (this.database instanceof LocalStorageDatabase) {\n\n      return 'localStorage';\n\n    } else if (this.database instanceof MemoryDatabase) {\n\n      return 'memory';\n\n    } else {\n\n      return 'unknown';\n\n    }\n\n  }\n\n  /**\n   * Info about `indexedDB` database. *Only useful for interoperability.*\n   * @returns `indexedDB` database name, store name and database version.\n   * **Values will be empty if the storage is not `indexedDB`,**\n   * **so it should be used after an engine check**.\n   *\n   * @see {@link https://github.com/cyrilletuzi/angular-async-local-storage/blob/master/docs/INTEROPERABILITY.md}\n   *\n   * @example\n   * if (this.storageMap.backingEngine === 'indexedDB') {\n   *   const { database, store, version } = this.storageMap.backingStore;\n   * }\n   */\n  get backingStore(): { database: string, store: string, version: number } {\n\n    return (this.database instanceof IndexedDBDatabase) ?\n      this.database.backingStore :\n      { database: '', store: '', version: 0 };\n\n  }\n\n  /**\n   * Info about `localStorage` fallback storage. *Only useful for interoperability.*\n   * @returns `localStorage` prefix.\n   * **Values will be empty if the storage is not `localStorage`,**\n   * **so it should be used after an engine check**.\n   *\n   * @see {@link https://github.com/cyrilletuzi/angular-async-local-storage/blob/master/docs/INTEROPERABILITY.md}\n   *\n   * @example\n   * if (this.storageMap.backingEngine === 'localStorage') {\n   *   const { prefix } = this.storageMap.fallbackBackingStore;\n   * }\n   */\n  get fallbackBackingStore(): { prefix: string } {\n\n    return (this.database instanceof LocalStorageDatabase) ?\n      { prefix: this.database.prefix } :\n      { prefix: '' };\n\n  }\n\n  /**\n   * Get an item value in storage.\n   * The signature has many overloads due to validation, **please refer to the documentation.**\n   * @see {@link https://github.com/cyrilletuzi/angular-async-local-storage/blob/master/docs/VALIDATION.md}\n   * @param key The item's key\n   * @param schema Optional JSON schema to validate the data\n   * @returns The item's value if the key exists, `undefined` otherwise, wrapped in a RxJS `Observable`\n   *\n   * @example\n   * this.storageMap.get('key', { type: 'string' }).subscribe((result) => {\n   *   result; // string or undefined\n   * });\n   *\n   * @example\n   * interface User {\n   *   firstName: string;\n   *   lastName?: string;\n   * }\n   *\n   * const schema = {\n   *   type: 'object',\n   *   properties: {\n   *     firstName: { type: 'string' },\n   *     lastName: { type: 'string' },\n   *   },\n   *   required: ['firstName']\n   * };\n   *\n   * this.storageMap.get<User>('user', schema).subscribe((user) => {\n   *   if (user) {\n   *     user.firstName;\n   *   }\n   * });\n   */\n  get<T = string>(key: string, schema: JSONSchemaString): Observable<string | undefined>;\n  get<T = number>(key: string, schema: JSONSchemaIntegerÂ | JSONSchemaNumber): Observable<number | undefined>;\n  get<T = boolean>(key: string, schema: JSONSchemaBoolean): Observable<boolean | undefined>;\n  get<T = string[]>(key: string, schema: JSONSchemaArrayOf<JSONSchemaString>): Observable<string[] | undefined>;\n  get<T = number[]>(key: string, schema: JSONSchemaArrayOf<JSONSchemaIntegerÂ | JSONSchemaNumber>): Observable<number[] | undefined>;\n  get<T = boolean[]>(key: string, schema: JSONSchemaArrayOf<JSONSchemaBoolean>): Observable<boolean[] | undefined>;\n  get<T = any>(key: string, schema: JSONSchema): Observable<T | undefined>;\n  get<T = unknown>(key: string, schema?: JSONSchema): Observable<unknown>;\n  get<T = any>(key: string, schema?: JSONSchema) {\n\n    /* Get the data in storage */\n    return this.database.get<T>(key).pipe(\n      /* Check if `indexedDb` is broken */\n      this.catchIDBBroken(() => this.database.get<T>(key)),\n      mergeMap((data) => {\n\n        /* No need to validate if the data is empty */\n        if ((data === undefined) || (data === null)) {\n\n          return of(undefined);\n\n        } else if (schema) {\n\n          /* Validate data against a JSON schema if provided */\n          if (!this.jsonValidator.validate(data, schema)) {\n            return throwError(new ValidationError());\n          }\n\n          /* Data have been checked, so it's OK to cast */\n          return of(data as T | undefined);\n\n        }\n\n        /* Cast to unknown as the data wasn't checked */\n        return of(data as unknown);\n\n      }),\n    );\n\n  }\n\n  /**\n   * Set an item in storage.\n   * Note that setting `null` or `undefined` will remove the item to avoid some browsers issues.\n   * @param key The item's key\n   * @param data The item's value\n   * @param schema Optional JSON schema to validate the data\n   * @returns A RxJS `Observable` to wait the end of the operation\n   *\n   * @example\n   * this.storageMap.set('key', 'value').subscribe(() => {});\n   */\n  set(key: string, data: any, schema?: JSONSchema): Observable<undefined> {\n\n    /* Storing `undefined` or `null` is useless and can cause issues in `indexedDb` in some browsers,\n     * so removing item instead for all storages to have a consistent API */\n    if ((data === undefined) || (data === null)) {\n      return this.delete(key);\n    }\n\n    /* Validate data against a JSON schema if provided */\n    if (schema && !this.jsonValidator.validate(data, schema)) {\n      return throwError(new ValidationError());\n    }\n\n    return this.database.set(key, data)\n      /* Catch if `indexedDb` is broken */\n      .pipe(this.catchIDBBroken(() => this.database.set(key, data)));\n\n  }\n\n  /**\n   * Delete an item in storage\n   * @param key The item's key\n   * @returns A RxJS `Observable` to wait the end of the operation\n   *\n   * @example\n   * this.storageMap.delete('key').subscribe(() => {});\n   */\n  delete(key: string): Observable<undefined> {\n\n    return this.database.delete(key)\n      /* Catch if `indexedDb` is broken */\n      .pipe(this.catchIDBBroken(() => this.database.delete(key)));\n\n  }\n\n  /**\n   * Delete all items in storage\n   * @returns A RxJS `Observable` to wait the end of the operation\n   *\n   * @example\n   * this.storageMap.clear().subscribe(() => {});\n   */\n  clear(): Observable<undefined> {\n\n    return this.database.clear()\n      /* Catch if `indexedDb` is broken */\n      .pipe(this.catchIDBBroken(() => this.database.clear()));\n\n  }\n\n  /**\n   * Get all keys stored in storage. Note **this is an *iterating* `Observable`**:\n   * * if there is no key, the `next` callback will not be invoked,\n   * * if you need to wait the whole operation to end, be sure to act in the `complete` callback,\n   * as this `Observable` can emit several values and so will invoke the `next` callback several times.\n   * @returns A list of the keys wrapped in a RxJS `Observable`\n   *\n   * @example\n   * this.storageMap.keys().subscribe({\n   *   next: (key) => { console.log(key); },\n   *   complete: () => { console.log('Done'); },\n   * });\n   */\n  keys(): Observable<string> {\n\n    return this.database.keys()\n      /* Catch if `indexedDb` is broken */\n      .pipe(this.catchIDBBroken(() => this.database.keys()));\n\n  }\n\n  /**\n   * Tells if a key exists in storage\n   * @returns A RxJS `Observable` telling if the key exists\n   *\n   * @example\n   * this.storageMap.has('key').subscribe((hasKey) => {\n   *   if (hasKey) {}\n   * });\n   */\n  has(key: string): Observable<boolean> {\n\n    return this.database.has(key)\n      /* Catch if `indexedDb` is broken */\n      .pipe(this.catchIDBBroken(() => this.database.has(key)));\n\n  }\n\n  /**\n   * RxJS operator to catch if `indexedDB` is broken\n   * @param operationCallback Callback with the operation to redo\n   */\n  protected catchIDBBroken<T>(operationCallback: () => Observable<T>): OperatorFunction<T, T> {\n\n    return catchError((error) => {\n\n      /* Check if `indexedDB` is broken based on error message (the specific error class seems to be lost in the process) */\n      if ((error !== undefined) && (error !== null) && (error.message === IDB_BROKEN_ERROR)) {\n\n        /* When storage is fully disabled in browser (via the \"Block all cookies\" option),\n         * just trying to check `localStorage` variable causes a security exception.\n         * Prevents https://github.com/cyrilletuzi/angular-async-local-storage/issues/118\n         */\n        try {\n\n          if ('getItem' in localStorage) {\n\n            /* Fallback to `localStorage` if available */\n            this.database = new LocalStorageDatabase(this.LSPrefix, this.oldPrefix);\n\n          } else {\n\n            /* Fallback to memory storage otherwise */\n            this.database = new MemoryDatabase();\n\n          }\n\n        } catch {\n\n          /* Fallback to memory storage otherwise */\n          this.database = new MemoryDatabase();\n\n        }\n\n        /* Redo the operation */\n        return operationCallback();\n\n      } else {\n\n        /* Otherwise, rethrow the error */\n        return throwError(error);\n\n      }\n\n    });\n\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { mapTo, toArray, map } from 'rxjs/operators';\n\nimport { StorageMap } from './storage-map.service';\nimport { JSONSchema, JSONSchemaBoolean, JSONSchemaInteger, JSONSchemaNumber, JSONSchemaString, JSONSchemaArrayOf } from '../validation';\n\n/**\n * @deprecated Will be removed in v9\n */\nexport interface LSGetItemOptions {\n\n  /**\n   * Subset of the JSON Schema standard.\n   * Types are enforced to validate everything: each value **must** have a `type`.\n   * @see {@link https://github.com/cyrilletuzi/angular-async-local-storage/blob/master/docs/VALIDATION.md}\n   */\n  schema?: JSONSchema | null;\n\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LocalStorage {\n\n  /**\n   * Number of items in storage\n   * @deprecated Use `.length`, or use `.size` via the new `StorageMap` service. Will be removed in v9.\n   */\n  get size(): Observable<number> {\n\n    return this.length;\n\n  }\n\n  /**\n   * Number of items in storage wrapped in an `Observable`\n   *\n   * @example\n   * this.localStorage.length.subscribe((length) => {\n   *   console.log(length);\n   * });\n   */\n  get length(): Observable<number> {\n\n    return this.storageMap.size;\n\n  }\n\n  /* Use the `StorageMap` service to avoid code duplication */\n  constructor(protected storageMap: StorageMap) {}\n\n  /**\n   * Get an item value in storage.\n   * The signature has many overloads due to validation, **please refer to the documentation.**\n   * @see {@link https://github.com/cyrilletuzi/angular-async-local-storage/blob/master/docs/VALIDATION.md}\n   * @param key The item's key\n   * @param schema Optional JSON schema to validate the data.\n   * **Note you must pass the schema directly as the second argument.**\n   * **Passing the schema in an object `{ schema }` is deprecated and only here**\n   * **for backward compatibility: it will be removed in v9.**\n   * @returns The item's value if the key exists, `null` otherwise, wrapped in a RxJS `Observable`\n   *\n   * @example\n   * this.localStorage.get('key', { type: 'string' }).subscribe((result) => {\n   *   result; // string or null\n   * });\n   *\n   * @example\n   * interface User {\n   *   firstName: string;\n   *   lastName?: string;\n   * }\n   *\n   * const schema = {\n   *   type: 'object',\n   *   properties: {\n   *     firstName: { type: 'string' },\n   *     lastName: { type: 'string' },\n   *   },\n   *   required: ['firstName']\n   * };\n   *\n   * this.localStorage.get<User>('user', schema).subscribe((user) => {\n   *   if (user) {\n   *     user.firstName;\n   *   }\n   * });\n   */\n  getItem<T = string>(key: string, schema: JSONSchemaString): Observable<string | null>;\n  getItem<T = number>(key: string, schema: JSONSchemaIntegerÂ | JSONSchemaNumber): Observable<number | null>;\n  getItem<T = boolean>(key: string, schema: JSONSchemaBoolean): Observable<boolean | null>;\n  getItem<T = string[]>(key: string, schema: JSONSchemaArrayOf<JSONSchemaString>): Observable<string[] | null>;\n  getItem<T = number[]>(key: string, schema: JSONSchemaArrayOf<JSONSchemaIntegerÂ | JSONSchemaNumber>): Observable<number[] | null>;\n  getItem<T = boolean[]>(key: string, schema: JSONSchemaArrayOf<JSONSchemaBoolean>): Observable<boolean[] | null>;\n  getItem<T = any>(key: string, schema: JSONSchema | { schema: JSONSchema }): Observable<T | null>;\n  getItem<T = unknown>(key: string, schema?: JSONSchema): Observable<unknown>;\n  getItem<T = any>(key: string, schema?: JSONSchema | { schema: JSONSchema } | undefined) {\n\n    if (schema) {\n\n      /* Backward compatibility with version <= 7 */\n      const schemaFinal: JSONSchema = ('schema' in schema) ? schema.schema : schema;\n\n      return this.storageMap.get<T>(key, schemaFinal).pipe(\n        /* Transform `undefined` into `null` to align with `localStorage` API */\n        map((value) => (value !== undefined) ? value : null),\n      );\n\n    } else {\n\n      return this.storageMap.get(key).pipe(\n        /* Transform `undefined` into `null` to align with `localStorage` API */\n        map((value) => (value !== undefined) ? value : null),\n      );\n\n    }\n\n  }\n\n  /**\n   * Set an item in storage.\n   * Note that setting `null` or `undefined` will remove the item to avoid some browsers issues.\n   * @param key The item's key\n   * @param data The item's value\n   * @param schema Optional JSON schema to validate the data\n   * @returns A RxJS `Observable` to wait the end of the operation\n   *\n   * @example\n   * this.localStorage.set('key', 'value').subscribe(() => {});\n   */\n  setItem(key: string, data: any, schema?: JSONSchema): Observable<boolean> {\n\n    return this.storageMap.set(key, data, schema).pipe(\n      /* Transform `undefined` into `true` for backward compatibility with v7 */\n      mapTo(true),\n    );\n\n  }\n\n  /**\n   * Delete an item in storage\n   * @param key The item's key\n   * @returns A RxJS `Observable` to wait the end of the operation\n   *\n   * @example\n   * this.localStorage.delete('key').subscribe(() => {});\n   */\n  removeItem(key: string): Observable<boolean> {\n\n    return this.storageMap.delete(key).pipe(\n      /* Transform `undefined` into `true` for backward compatibility with v7 */\n      mapTo(true),\n    );\n\n  }\n\n  /**\n   * Delete all items in storage\n   * @returns A RxJS `Observable` to wait the end of the operation\n   *\n   * @example\n   * this.localStorage.clear().subscribe(() => {});\n   */\n  clear(): Observable<boolean> {\n\n    return this.storageMap.clear().pipe(\n      /* Transform `undefined` into `true` for backward compatibility with v7 */\n      mapTo(true),\n    );\n\n  }\n\n  /**\n   * Get all keys stored in storage\n   * @returns A list of the keys wrapped in a RxJS `Observable`\n   * @deprecated Moved to `StorageMap` service. Will be removed in v9.\n   * Note that while this method was giving you all keys at once in an array,\n   * the new `keys()` method in `StorageMap` service will *iterate* on each key.\n   */\n  keys(): Observable<string[]> {\n\n    return this.storageMap.keys().pipe(\n      /* Backward compatibility with v7: transform iterating `Observable` to a single array value */\n      toArray(),\n    );\n\n  }\n\n  /**\n   * Tells if a key exists in storage\n   * @returns A RxJS `Observable` telling if the key exists\n   * @deprecated Moved to `StorageMap` service. Will be removed in v9.\n   */\n  has(key: string): Observable<boolean> {\n\n    return this.storageMap.has(key);\n\n  }\n\n  /**\n   * Set an item in storage, and auto-subscribe\n   * @param key The item's key\n   * @param data The item's value\n   * **WARNING: should be avoided in most cases, use this method only if these conditions are fulfilled:**\n   * - you don't need to manage the error callback (errors will silently fail),\n   * - you don't need to wait the operation to finish before the next one (remember, it's asynchronous).\n   * @deprecated Promoted bad practices. Will be removed in v9.\n   */\n  setItemSubscribe(key: string, data: string | number | boolean | object): void {\n\n    this.setItem(key, data).subscribe({\n      next: () => {},\n      error: () => {},\n    });\n\n  }\n\n  /**\n   * Delete an item in storage, and auto-subscribe\n   * @param key The item's key\n   * **WARNING: should be avoided in most cases, use this method only if these conditions are fulfilled:**\n   * - you don't need to manage the error callback (errors will silently fail),\n   * - you don't need to wait the operation to finish before the next one (remember, it's asynchronous).\n   * @deprecated Promoted bad practices. Will be removed in v9.\n   */\n   removeItemSubscribe(key: string): void {\n\n    this.removeItem(key).subscribe({\n      next: () => {},\n      error: () => {},\n    });\n\n  }\n\n  /**\n   * Delete all items in storage, and auto-subscribe\n   * **WARNING: should be avoided in most cases, use this method only if these conditions are fulfilled:**\n   * - you don't need to manage the error callback (errors will silently fail),\n   * - you don't need to wait the operation to finish before the next one (remember, it's asynchronous).\n   * @deprecated Promoted bad practices. Will be removed in v9.\n   */\n  clearSubscribe(): void {\n\n    this.clear().subscribe({\n      next: () => {},\n      error: () => {},\n    });\n\n  }\n\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { LS_PREFIX, IDB_DB_NAME, IDB_STORE_NAME, IDB_DB_VERSION, IDB_NO_WRAP, StorageConfig } from './tokens';\n\n/**\n * This module does not contain anything, it's only useful to provide options via `.forRoot()`.\n */\n@NgModule()\nexport class StorageModule {\n\n  /**\n   * Only useful to provide options, otherwise it does nothing.\n   * **Must be used at initialization, ie. in `AppModule`, and must not be loaded again in another module.**\n   *\n   * @example\n   * NgModule({\n   *   imports: [StorageModule.forRoot({\n   *     IDBNoWrap: true,\n   *   })]\n   * })\n   * export class AppModule\n   */\n  static forRoot(config: StorageConfig): ModuleWithProviders {\n    return {\n      ngModule: StorageModule,\n      providers: [\n        config.LSPrefix ? { provide: LS_PREFIX, useValue: config.LSPrefix } : [],\n        config.IDBDBName ? { provide: IDB_DB_NAME, useValue: config.IDBDBName } : [],\n        config.IDBStoreName ? { provide: IDB_STORE_NAME, useValue: config.IDBStoreName } : [],\n        config.IDBDBVersion ? { provide: IDB_DB_VERSION, useValue: config.IDBDBVersion } : [],\n        config.IDBNoWrap ? { provide: IDB_NO_WRAP, useValue: config.IDBNoWrap } : [],\n      ],\n    };\n  }\n\n}\n"],"names":["tslib_1.__extends","InjectionToken","ReplaySubject","mergeMap","first","takeWhile","map","tap","race","fromEvent","throwError","of","Injectable","tslib_1.__param","Inject","Observable","observeOn","asyncScheduler","from","isPlatformBrowser","PLATFORM_ID","tslib_1.__values","catchError","mapTo","toArray","NgModule"],"mappings":"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"}